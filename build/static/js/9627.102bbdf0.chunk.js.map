{"version":3,"file":"static/js/9627.102bbdf0.chunk.js","mappings":"6QAKA,MAAMA,EAAe,uEAmCfC,EAAc,6dA4DpB,SAASC,EAAwBC,EAAmCC,GAClE,OAAO,IAAIC,EAAAA,MACTD,EACAD,EAAUG,GACVC,SAASJ,EAAUK,UACnBL,EAAUM,OACVN,EAAUO,KAEd,CAEA,SAASC,EAAgBC,GACvB,MAAMC,EAAQC,WAAWF,GACzB,OAAIC,GAAS,IACJ,IAAIA,EAAQ,KAASE,QAAQ,MAC3BF,GAAS,IACX,IAAIA,EAAQ,KAAME,QAAQ,MAE5BF,EAAME,QAAQ,EACvB,CAEA,SAASC,EAAaC,GACpB,MAAMJ,EAAQC,WAAWG,GACzB,OAAIJ,GAAS,IACJ,KAAKA,EAAQ,KAASE,QAAQ,MAC5BF,GAAS,IACX,KAAKA,EAAQ,KAAME,QAAQ,MAE7B,IAAIF,EAAME,QAAQ,IAC3B,CAEA,SAASG,EAAaC,EAAiBC,GACrC,MAAMC,EAAOP,WAAWK,GAClBG,EAAMR,WAAWM,GAEvB,GAAY,IAARE,EAAW,MAAO,OAMtB,OAF0B,KADND,EAAOC,GACK,KAErBP,QAAQ,EACrB,CAEO,SAASQ,IACd,MAAM,QAAEnB,IAAYoB,EAAAA,EAAAA,iBACbC,EAAOC,IAAYC,EAAAA,EAAAA,UAA8B,KACjDC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAwB,MA8DlD,OA5DAK,EAAAA,EAAAA,YAAU,MACRC,iBACE,GAAK7B,EAKL,IACEyB,GAAW,GACXE,EAAS,MAET,MAAMG,QAzFdD,iBACE,IAAK,IAADE,EACF,MAAMC,QAAiBC,MAAMrC,EAAc,CACzCsC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,MAAO1C,MAIX,IAAKmC,EAASQ,GACZ,MAAM,IAAIC,MAAM,uBAAuBT,EAASU,UAGlD,MAAMC,QAAaX,EAASY,OAE5B,GAAID,EAAKE,OACP,MAAM,IAAIJ,MAAM,mBAAmBJ,KAAKC,UAAUK,EAAKE,WAGzD,OAAgB,QAATd,EAAAY,EAAKA,YAAI,IAAAZ,OAAA,EAATA,EAAWV,QAAS,EAC7B,CAAE,MAAOK,GAEP,MADAoB,QAAQpB,MAAM,gCAAiCA,GACzCA,CACR,CACF,CA8DoCqB,GAEtBC,EAAsClB,EAAcmB,KAAKC,IAC7D,MAAMC,EAASrD,EAAwBoD,EAAKC,OAAQnD,GAC9CoD,EAAStD,EAAwBoD,EAAKE,OAAQpD,GAGpD,IAAIqD,EACJ,OAAQH,EAAKI,SACX,IAAK,MACHD,EAAME,EAAAA,UAAUC,OAChB,MACF,IAAK,MACHH,EAAME,EAAAA,UAAUE,IAChB,MACF,IAAK,OAML,QACEJ,EAAME,EAAAA,UAAUG,aAJlB,IAAK,QACHL,EAAME,EAAAA,UAAUI,KAMpB,MAAO,CACLR,SACAC,SACAC,MACAO,UAAWV,EAAKU,UAChBC,UAAWjD,EAAasC,EAAKrC,WAC7BiD,QAASlD,EAAasC,EAAKnC,SAC3BgD,IAAKjD,EAAaoC,EAAKnC,QAASmC,EAAKlC,qBACrCgD,OAAQzD,EAAgB2C,EAAKlC,qBAC9B,IAGHM,EAAS0B,EACX,CAAE,MAAOiB,GACPnB,QAAQpB,MAAM,uBAAwBuC,GACtCtC,EAASsC,aAAexB,MAAQwB,EAAIC,QAAU,gBAChD,CAAC,QACCzC,GAAW,EACb,MAnDEA,GAAW,EAoDf,CAEA0C,EAAW,GACV,CAACnE,IAEG,CAAEqB,QAAOG,UAASE,QAC3B,C,0DChMA,MAAM0C,EAAcC,EAAAA,QAAOC,GAAG;;;;;;uBAMPC,IAAA,IAAC,MAAEC,GAAOD,EAAA,MAAK,GAAGC,EAAMC,WAAWC,MAAM;;;;;uBAKzCC,IAAA,IAAC,MAAEH,GAAOG,EAAA,MAAK,GAAGH,EAAMC,WAAWG,MAAM;;;;;uBAKzCC,IAAA,IAAC,MAAEL,GAAOK,EAAA,MAAK,GAAGL,EAAMC,WAAWK,MAAM;;;;EAM1DC,EAAgBV,EAAAA,QAAOC,GAAG;;;;uBAITU,IAAA,IAAC,MAAER,GAAOQ,EAAA,MAAK,GAAGR,EAAMC,WAAWK,MAAM;;;EAK1DG,EAAYZ,EAAAA,QAAOa,EAAE;;;WAGhBC,IAAA,IAAC,MAAEX,GAAOW,EAAA,OAAKX,EAAMY,QAAQ;;wCAEAC,IAAA,IAAC,MAAEb,GAAOa,EAAA,OAAKb,EAAMc,OAAO,SAAQC,IAAA,IAAC,MAAEf,GAAOe,EAAA,OAAKf,EAAMgB,OAAO;;;;;uBAKjFC,IAAA,IAAC,MAAEjB,GAAOiB,EAAA,MAAK,GAAGjB,EAAMC,WAAWG,MAAM;;;;uBAIzCc,IAAA,IAAC,MAAElB,GAAOkB,EAAA,MAAK,GAAGlB,EAAMC,WAAWK,MAAM;;;EAK1Da,EAAWtB,EAAAA,QAAOuB,CAAC;;WAEdC,IAAA,IAAC,MAAErB,GAAOqB,EAAA,OAAKrB,EAAMsB,QAAQ;;;;;uBAKjBC,IAAA,IAAC,MAAEvB,GAAOuB,EAAA,MAAK,GAAGvB,EAAMC,WAAWK,MAAM;;;EAK1DkB,EAAc3B,EAAAA,QAAOC,GAAG;;;;;;;uBAOP2B,IAAA,IAAC,MAAEzB,GAAOyB,EAAA,MAAK,GAAGzB,EAAMC,WAAWK,MAAM;;;;;EAO1DoB,EAAY7B,EAAAA,QAAOC,GAAG;WACjB6B,IAAA,IAAC,MAAE3B,GAAO2B,EAAA,OAAK3B,EAAMsB,QAAQ;;;EAKlCM,EAAiB/B,EAAAA,QAAOC,GAAG;gBACjB+B,IAAA,IAAC,MAAE7B,GAAO6B,EAAA,OAAK7B,EAAM8B,QAAQ;sBACvBC,IAAA,IAAC,MAAE/B,GAAO+B,EAAA,OAAK/B,EAAMgC,QAAQ;;;;;;;;;;;;;;yCAcVC,IAAA,IAAC,MAAEjC,GAAOiC,EAAA,OAAKjC,EAAMc,OAAO,SAAQoB,IAAA,IAAC,MAAElC,GAAOkC,EAAA,OAAKlC,EAAMgB,OAAO;;;;;;oBAMrFmB,IAAA,IAAC,MAAEnC,GAAOmC,EAAA,OAAKnC,EAAMc,OAAO;;;;;;;;EAU1CsB,EAAavC,EAAAA,QAAOC,GAAG;;;;;;uBAMNuC,IAAA,IAAC,MAAErC,GAAOqC,EAAA,MAAK,GAAGrC,EAAMC,WAAWK,MAAM;;;;EAM1DgC,EAAazC,EAAAA,QAAOC,GAAG;;;;EAMvByC,EAAY1C,EAAAA,QAAOC,GAAG;;;;EAMtB0C,EAAY3C,EAAAA,QAAOC,GAAG;;;WAGjB2C,IAAA,IAAC,MAAEzC,GAAOyC,EAAA,OAAKzC,EAAMY,QAAQ;EAGlC8B,EAAS7C,EAAAA,QAAOC,GAAG;gBACT6C,IAAA,IAAC,MAAE3C,GAAO2C,EAAA,OAAK3C,EAAMc,OAAO;;;;;;;;EAUtC8B,EAAY/C,EAAAA,QAAOC,GAAG;;;;;;uBAML+C,IAAA,IAAC,MAAE7C,GAAO6C,EAAA,MAAK,GAAG7C,EAAMC,WAAWK,MAAM;;;;EAM1DwC,EAAWjD,EAAAA,QAAOC,GAAG;;;;EAMrBiD,EAAYlD,EAAAA,QAAOmD,IAAI;;WAElBC,IAAA,IAAC,MAAEjD,GAAOiD,EAAA,OAAKjD,EAAMkD,QAAQ;;;;EAMlCC,EAAYtD,EAAAA,QAAOmD,IAAI;;;WAGlBI,IAAA,IAAC,MAAEpD,GAAOoD,EAAA,OAAKpD,EAAMY,QAAQ;EAGlCyC,GAAgBxD,EAAAA,EAAAA,SAAOsD,EAAU;WAC5BG,IAAA,IAAC,MAAEtD,GAAOsD,EAAA,OAAKtD,EAAMuD,OAAO;;EAIjCC,GAAc3D,EAAAA,EAAAA,SAAO4D,EAAAA,GAAc;;;;;;wCAMDC,IAAA,IAAC,MAAE1D,GAAO0D,EAAA,OAAK1D,EAAMc,OAAO,SAAQ6C,IAAA,IAAC,MAAE3D,GAAO2D,EAAA,OAAK3D,EAAMgB,OAAO;;;;;;;;;;;;;uBAajF4C,IAAA,IAAC,MAAE5D,GAAO4D,EAAA,MAAK,GAAG5D,EAAMC,WAAWK,MAAM;;;;EAM1DuD,EAAmBhE,EAAAA,QAAOC,GAAG;gBACnBgE,IAAA,IAAC,MAAE9D,GAAO8D,EAAA,OAAK9D,EAAM8B,QAAQ;sBACvBiC,IAAA,IAAC,MAAE/D,GAAO+D,EAAA,OAAK/D,EAAMgC,QAAQ;;;;EAM7CgC,EAAiBnE,EAAAA,QAAOC,GAAG;gBACjBmE,IAAA,IAAC,MAAEjE,GAAOiE,EAAA,OAAKjE,EAAM8B,QAAQ;sBACvBoC,IAAA,IAAC,MAAElE,GAAOkE,EAAA,OAAKlE,EAAMgC,QAAQ;;;;EAM7CmC,EAAiBtE,EAAAA,QAAOC,GAAG;gBACjBsE,IAAA,IAAC,MAAEpE,GAAOoE,EAAA,OAAKpE,EAAM8B,QAAQ;sBACvBuC,IAAA,IAAC,MAAErE,GAAOqE,EAAA,OAAKrE,EAAMsE,QAAQ;;;;EAM7CC,EAAgB1E,EAAAA,QAAOC,GAAG;;;;;uBAKT0E,IAAA,IAAC,MAAExE,GAAOwE,EAAA,MAAK,GAAGxE,EAAMC,WAAWC,MAAM;;;;;uBAKzCuE,IAAA,IAAC,MAAEzE,GAAOyE,EAAA,MAAK,GAAGzE,EAAMC,WAAWG,MAAM;;;;;uBAKzCsE,IAAA,IAAC,MAAE1E,GAAO0E,EAAA,MAAK,GAAG1E,EAAMC,WAAWK,MAAM;;;;EAiBhE,SAASqE,EAAQC,GAAwC,IAAvC,SAAEC,GAAkCD,GACtCE,EAAAA,EAAAA,YAAd,MACOC,EAAWrG,IAAQsG,EAAAA,EAAAA,GAAQH,EAASlG,OAAQkG,EAASjG,OAAQiG,EAAShG,KAEvEoG,EAAYF,IAAcG,EAAAA,EAAUC,QACpCC,EAAgBP,EAAShG,IAAM,IAErC,OAAIoG,GAEAI,EAAAA,EAAAA,KAACzD,EAAc,CAAA0D,UACbC,EAAAA,EAAAA,MAACC,EAAAA,GAAW,CAAAF,SAAA,EACVD,EAAAA,EAAAA,KAAA,WACAA,EAAAA,EAAAA,KAAA,WACAA,EAAAA,EAAAA,KAAA,gBAONE,EAAAA,EAAAA,MAAC3D,EAAc,CAAA0D,SAAA,EACbD,EAAAA,EAAAA,KAACjD,EAAU,CAAAkD,UACTC,EAAAA,EAAAA,MAACjD,EAAU,CAAAgD,SAAA,EACTD,EAAAA,EAAAA,KAACI,EAAAA,EAAkB,CAACC,UAAWb,EAASlG,OAAQgH,UAAWd,EAASjG,OAAQgH,KAAM,MAClFL,EAAAA,EAAAA,MAAChD,EAAS,CAAA+C,SAAA,EACRC,EAAAA,EAAAA,MAAC/C,EAAS,CAAA8C,SAAA,CACPT,EAASlG,OAAO9C,OAAO,IAAEgJ,EAASjG,OAAO/C,WAE5C0J,EAAAA,EAAAA,MAAC7C,EAAM,CAAA4C,SAAA,CAAEF,EAAc,oBAK7BG,EAAAA,EAAAA,MAAC3C,EAAS,CAAA0C,SAAA,EACRC,EAAAA,EAAAA,MAACzC,EAAQ,CAAAwC,SAAA,EACPD,EAAAA,EAAAA,KAACtC,EAAS,CAAAuC,SAAC,wBACXC,EAAAA,EAAAA,MAACpC,EAAS,CAAAmC,SAAA,CAAC,IAAET,EAASrF,QAAU,aAElC+F,EAAAA,EAAAA,MAACzC,EAAQ,CAAAwC,SAAA,EACPD,EAAAA,EAAAA,KAACtC,EAAS,CAAAuC,SAAC,gBACXD,EAAAA,EAAAA,KAAClC,EAAS,CAAAmC,SAAET,EAASxF,WAAa,YAEpCkG,EAAAA,EAAAA,MAACzC,EAAQ,CAAAwC,SAAA,EACPD,EAAAA,EAAAA,KAACtC,EAAS,CAAAuC,SAAC,cACXD,EAAAA,EAAAA,KAAClC,EAAS,CAAAmC,SAAET,EAASvF,SAAW,YAElCiG,EAAAA,EAAAA,MAACzC,EAAQ,CAAAwC,SAAA,EACPD,EAAAA,EAAAA,KAACtC,EAAS,CAAAuC,SAAC,SACXD,EAAAA,EAAAA,KAAChC,EAAa,CAAAiC,SAAET,EAAStF,IAAM,GAAGsF,EAAStF,OAAS,eAIxD8F,EAAAA,EAAAA,KAAC7B,EAAW,CACVqC,GAAIC,EAAAA,GACJC,GAAI,SAAQC,EAAAA,EAAAA,GAAWnB,EAASlG,YAAWqH,EAAAA,EAAAA,GAAWnB,EAASjG,WAAWiG,EAAShG,MAAMyG,UAEzFD,EAAAA,EAAAA,KAAA,KAAAC,SAAG,6BAIX,CAEe,SAASW,IACtB,MAAMjG,GAAQ8E,EAAAA,EAAAA,aACR,QAAEtJ,IAAYoB,EAAAA,EAAAA,iBACd,MAAEC,EAAK,QAAEG,EAAO,MAAEE,GAAUP,IAElC,OAAKnB,GAoBH+J,EAAAA,EAAAA,MAAC3F,EAAW,CAAA0F,SAAA,EACVC,EAAAA,EAAAA,MAAChF,EAAa,CAAA+E,SAAA,EACZD,EAAAA,EAAAA,KAAC5E,EAAS,CAAA6E,SAAC,kBACXD,EAAAA,EAAAA,KAAClE,EAAQ,CAAAmE,SAAC,0JAMXpI,GACCqI,EAAAA,EAAAA,MAACpB,EAAc,CAAAmB,SAAA,EACbD,EAAAA,EAAAA,KAACa,EAAAA,GAAWC,cAAa,CAACC,MAAO,CAAEC,aAAc,OAAQC,MAAOtG,EAAMsE,UAAWgB,UAC/ED,EAAAA,EAAAA,KAAA,KAAAC,SAAG,qCAELD,EAAAA,EAAAA,KAACa,EAAAA,GAAWK,YAAW,CAACD,MAAOtG,EAAMsE,SAAU8B,MAAO,CAAEC,aAAc,OAAQf,UAC5EC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,6BAA2BpI,QAEhCmI,EAAAA,EAAAA,KAACa,EAAAA,GAAWM,QAAO,CAACJ,MAAO,CAAEE,MAAOtG,EAAMsB,UAAWgE,UACnDD,EAAAA,EAAAA,KAAA,KAAAC,SAAG,oDAGLtI,GACFuI,EAAAA,EAAAA,MAAC1B,EAAgB,CAAAyB,SAAA,EACfD,EAAAA,EAAAA,KAACa,EAAAA,GAAWC,cAAa,CAACC,MAAO,CAAEC,aAAc,QAASf,UACxDD,EAAAA,EAAAA,KAAA,KAAAC,SAAG,qCAELD,EAAAA,EAAAA,KAACa,EAAAA,GAAWK,YAAW,CAACH,MAAO,CAAEC,aAAc,QAASf,UACtDD,EAAAA,EAAAA,KAAA,KAAAC,SAAG,sDAELC,EAAAA,EAAAA,MAACC,EAAAA,GAAW,CAAAF,SAAA,EACVD,EAAAA,EAAAA,KAAA,WACAA,EAAAA,EAAAA,KAAA,WACAA,EAAAA,EAAAA,KAAA,gBAGe,IAAjBxI,EAAM4J,QACRlB,EAAAA,EAAAA,MAACvB,EAAc,CAAAsB,SAAA,EACbD,EAAAA,EAAAA,KAACa,EAAAA,GAAWC,cAAa,CAACC,MAAO,CAAEC,aAAc,QAASf,UACxDD,EAAAA,EAAAA,KAAA,KAAAC,SAAG,uCAELD,EAAAA,EAAAA,KAACa,EAAAA,GAAWK,YAAW,CAAAjB,UACrBD,EAAAA,EAAAA,KAAA,KAAAC,SAAG,4GAIPC,EAAAA,EAAAA,MAAAmB,EAAAA,SAAA,CAAApB,SAAA,EACED,EAAAA,EAAAA,KAAC7D,EAAW,CAAA8D,UACVD,EAAAA,EAAAA,KAAC3D,EAAS,CAAA4D,UACRC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,WAASzI,EAAM4J,OAAO,+BAG7BpB,EAAAA,EAAAA,KAACd,EAAa,CAAAe,SACXzI,EAAM4B,KAAI,CAACoG,EAAU8B,KACpBtB,EAAAA,EAAAA,KAACV,EAAQ,CAEPE,SAAUA,GADL,GAAGA,EAASlG,OAAOiI,QAAQC,WAAWhC,EAASjG,OAAOgI,QAAQC,WAAWhC,EAAShG,kBAxEjG0G,EAAAA,EAAAA,MAAC3F,EAAW,CAAA0F,SAAA,EACVC,EAAAA,EAAAA,MAAChF,EAAa,CAAA+E,SAAA,EACZD,EAAAA,EAAAA,KAAC5E,EAAS,CAAA6E,SAAC,oBACXD,EAAAA,EAAAA,KAAClE,EAAQ,CAAAmE,SAAC,6DAEZC,EAAAA,EAAAA,MAACvB,EAAc,CAAAsB,SAAA,EACbD,EAAAA,EAAAA,KAACa,EAAAA,GAAWC,cAAa,CAACC,MAAO,CAAEC,aAAc,QAASf,UACxDD,EAAAA,EAAAA,KAAA,KAAAC,SAAG,+CAELD,EAAAA,EAAAA,KAACa,EAAAA,GAAWK,YAAW,CAAAjB,UACrBD,EAAAA,EAAAA,KAAA,KAAAC,SAAG,0FAuEf,C,snGC7aA,MAAMwB,EAAuB,IAAIC,EAAAA,GAAUC,EAAAA,IAI3C,MAAMC,EAQJ,qBAAOC,CAAeC,EAAwBC,EAAeC,EAAexI,GACtEyI,KAAKC,UAAUd,OAASa,KAAKE,cAC/BF,KAAKC,UAAYD,KAAKC,UAAUE,MAAM,EAAGH,KAAKE,YAAc,IAG9D,MAAQX,QAASa,GAAaN,GACtBP,QAASc,GAAaN,EACxBO,EAAM,GAAGT,KAAkBO,KAAYC,KAAY9I,EAAIgJ,aACvDC,EAAQR,KAAKC,UAAUQ,MAAMlB,GAAYA,EAAQe,MAAQA,IAC/D,GAAIE,EAAO,OAAOA,EAAMjB,QAExB,MAAMA,EAAU,CACde,MACAf,SAASmB,EAAAA,EAAAA,oBAAmB,CAC1Bb,iBACAC,SACAC,SACAxI,MACAoJ,2BAA4B,wEAIhC,OADAX,KAAKC,UAAUW,QAAQrB,GAChBA,EAAQA,OACjB,CAEA,cAAOsB,CACLf,EACAC,EACAxI,EACAuJ,EACAhJ,EACAiJ,GAEIf,KAAKzK,MAAM4J,OAASa,KAAKE,cAC3BF,KAAKzK,MAAQyK,KAAKzK,MAAM4K,MAAM,EAAGH,KAAKE,YAAc,IAGtD,MAAMM,EAAQR,KAAKzK,MAAMkL,MACtBrJ,GACCA,EAAKC,SAAWyI,GAChB1I,EAAKE,SAAWyI,GAChB3I,EAAKG,MAAQA,GACbyJ,IAAAA,GAAQ5J,EAAK6J,aAAcH,IAC3BE,IAAAA,GAAQ5J,EAAKU,UAAWA,IACxBV,EAAK8J,cAAgBH,IAEzB,GAAIP,EAAO,OAAOA,EAElB,MAAMpJ,EAAO,IAAI+J,EAAAA,KAAKrB,EAAQC,EAAQxI,EAAKuJ,EAAchJ,EAAWiJ,GAEpE,OADAf,KAAKzK,MAAMqL,QAAQxJ,GACZA,CACT,EA3DIuI,EAEWO,YAAc,IAFzBP,EAKWpK,MAAgB,GAL3BoK,EAMWM,UAAgD,GAwD1D,IAAKrC,EAAS,SAATA,GAAS,OAATA,EAAAA,EAAS,qBAATA,EAAAA,EAAS,2BAATA,EAAAA,EAAS,mBAATA,EAAAA,EAAS,qBAATA,CAAS,MAsEd,SAASF,EACd0D,EACAC,EACAC,GAEA,MAAMC,GAAkFC,EAAAA,EAAAA,UACtF,IAAM,CAAC,CAACJ,EAAWC,EAAWC,KAC9B,CAACF,EAAWC,EAAWC,IAMzB,OAHAtK,QAAQyK,IAAI,qBAAsBF,GAzEpC,SACEA,GAEA,MAAM,QAAErN,IAAYoB,EAAAA,EAAAA,gBACpB0B,QAAQyK,IAAI,uBAAwBvN,GAEpC,MAAMwN,GAAwDF,EAAAA,EAAAA,UAAQ,IAC/DtN,EAEEqN,EAASpK,KAAIsB,IAAwC,IAAtC2I,EAAWC,EAAWC,GAAU7I,EACpD,GAAI2I,GAAaC,GAAaC,EAAW,CACvC,MAAMxB,EAASsB,EAAU9B,QACnBS,EAASsB,EAAU/B,QACzB,GAAIQ,EAAO6B,OAAO5B,GAAS,OAE3B,OAAOD,EAAO8B,YAAY7B,GAAU,CAACD,EAAQC,EAAQuB,GAAa,CAACvB,EAAQD,EAAQwB,EACrF,CACgB,IAVG,IAAIO,MAAMN,EAASpC,SAYvC,CAACjL,EAASqN,IACbvK,QAAQyK,IAAI,yBAA0BC,GAEtC,MAAMI,GAAwCN,EAAAA,EAAAA,UAAQ,KACpDxK,QAAQyK,IAAI,qBACZ,MAAMM,EAAuB7N,GAAW8N,EAAAA,0BAA0B9N,GAElE,OADA8C,QAAQyK,IAAI,wCAAyCM,GAChDA,EAEEL,EAAWvK,KAAKxC,GAAUA,GAASgL,EAAUC,eAAemC,KAAyBpN,KAF1D,IAAIkN,MAAMH,EAAWvC,OAE4C,GAClG,CAACjL,EAASwN,IACb1K,QAAQyK,IAAI,4BAA6BK,GAEzC,MAAMG,GAASC,EAAAA,EAAAA,IAA8BJ,EAAetC,EAAsB,SAC5E2C,GAAcD,EAAAA,EAAAA,IAA8BJ,EAAetC,EAAsB,aAEvF,OAAOgC,EAAAA,EAAAA,UAAQ,IACND,EAASpK,KAAI,CAACiL,EAAM/C,KACzB,MAAMgD,EAASX,EAAWrC,GAC1B,IAAKgD,EAAQ,MAAO,CAACzE,EAAU0E,QAAS,MACxC,MAAOjL,EAAQC,EAAQC,GAAO8K,EAE9B,IAAKJ,EAAO5C,GAAQ,MAAO,CAACzB,EAAU0E,QAAS,MAC/C,MAAQC,OAAQC,EAAO9M,QAAS+M,EAAcC,MAAOC,GAAeV,EAAO5C,GAE3E,IAAK8C,EAAY9C,GAAQ,MAAO,CAACzB,EAAU0E,QAAS,MACpD,MAAQC,OAAQzK,EAAWpC,QAASkN,EAAkBF,MAAOG,GAAmBV,EAAY9C,GAE5F,IAAKgD,IAAWM,IAAeE,EAAgB,MAAO,CAACjF,EAAU0E,QAAS,MAC1E,GAAIG,GAAgBG,EAAkB,MAAO,CAAChF,EAAUC,QAAS,MACjE,IAAK2E,IAAU1K,EAAW,MAAO,CAAC8F,EAAUkF,WAAY,MACxD,IAAKN,EAAM1B,cAAgB0B,EAAM1B,aAAaiC,GAAG,GAAI,MAAO,CAACnF,EAAUkF,WAAY,MAEnF,IACE,MAAM1L,EAAOuI,EAAUkB,QAAQxJ,EAAQC,EAAQC,EAAKiL,EAAM1B,aAAchJ,EAAU,GAAI0K,EAAMzB,MAC5F,MAAO,CAACnD,EAAUoF,OAAQ5L,EAC5B,CAAE,MAAOxB,GAEP,OADAoB,QAAQpB,MAAM,mCAAoCA,GAC3C,CAACgI,EAAUkF,WAAY,KAChC,MAED,CAACX,EAAaZ,EAAUU,EAAQP,GACrC,CAeSuB,CAAS1B,GAAU,EAC5B,C","sources":["hooks/useSubgraphPools.ts","pages/Earn/index.tsx","hooks/usePools.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { Currency, Token } from '@synthra-swap/sdk-core'\nimport { FeeAmount } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\n\nconst SUBGRAPH_URL = 'https://subgraph.synthra.org/subgraphs/name/ianlapham/uniswap-v3-sub'\n\ninterface SubgraphPool {\n  id: string\n  token0: {\n    id: string\n    symbol: string\n    name: string\n    decimals: string\n  }\n  token1: {\n    id: string\n    symbol: string\n    name: string\n    decimals: string\n  }\n  feeTier: string\n  liquidity: string\n  totalValueLockedUSD: string\n  volumeUSD: string\n  feesUSD: string\n  txCount: string\n}\n\ninterface FormattedPoolData {\n  token0: Currency\n  token1: Currency\n  fee: FeeAmount\n  liquidity: string\n  volume24h: string\n  fees24h: string\n  apr: string\n  tvlUSD: string\n}\n\nconst POOLS_QUERY = `\n  query GetTopPools {\n    pools(\n      first: 15\n      orderBy: totalValueLockedUSD\n      orderDirection: desc\n      where: { totalValueLockedUSD_gt: \"1000\" }\n    ) {\n      id\n      token0 {\n        id\n        symbol\n        name\n        decimals\n      }\n      token1 {\n        id\n        symbol\n        name\n        decimals\n      }\n      feeTier\n      liquidity\n      totalValueLockedUSD\n      volumeUSD\n      feesUSD\n      txCount\n    }\n  }\n`\n\nasync function fetchSubgraphData(): Promise<SubgraphPool[]> {\n  try {\n    const response = await fetch(SUBGRAPH_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: POOLS_QUERY,\n      }),\n    })\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`)\n    }\n\n    const data = await response.json()\n    \n    if (data.errors) {\n      throw new Error(`GraphQL errors: ${JSON.stringify(data.errors)}`)\n    }\n\n    return data.data?.pools || []\n  } catch (error) {\n    console.error('Error fetching subgraph data:', error)\n    throw error\n  }\n}\n\nfunction createTokenFromSubgraph(tokenData: SubgraphPool['token0'], chainId: number): Token {\n  return new Token(\n    chainId,\n    tokenData.id,\n    parseInt(tokenData.decimals),\n    tokenData.symbol,\n    tokenData.name\n  )\n}\n\nfunction formatLiquidity(valueUSD: string): string {\n  const value = parseFloat(valueUSD)\n  if (value >= 1000000) {\n    return `${(value / 1000000).toFixed(2)}M`\n  } else if (value >= 1000) {\n    return `${(value / 1000).toFixed(2)}K`\n  }\n  return value.toFixed(2)\n}\n\nfunction formatVolume(volumeUSD: string): string {\n  const value = parseFloat(volumeUSD)\n  if (value >= 1000000) {\n    return `$${(value / 1000000).toFixed(2)}M`\n  } else if (value >= 1000) {\n    return `$${(value / 1000).toFixed(2)}K`\n  }\n  return `$${value.toFixed(2)}`\n}\n\nfunction calculateAPR(feesUSD: string, totalValueLockedUSD: string): string {\n  const fees = parseFloat(feesUSD)\n  const tvl = parseFloat(totalValueLockedUSD)\n  \n  if (tvl === 0) return '0.00'\n  \n  // Stima APR basata sui fee giornalieri * 365\n  const dailyReturn = fees / tvl\n  const apr = dailyReturn * 365 * 100\n  \n  return apr.toFixed(2)\n}\n\nexport function useSubgraphPools() {\n  const { chainId } = useWeb3React()\n  const [pools, setPools] = useState<FormattedPoolData[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    async function loadPools() {\n      if (!chainId) {\n        setLoading(false)\n        return\n      }\n\n      try {\n        setLoading(true)\n        setError(null)\n        \n        const subgraphPools = await fetchSubgraphData()\n        \n        const formattedPools: FormattedPoolData[] = subgraphPools.map((pool) => {\n          const token0 = createTokenFromSubgraph(pool.token0, chainId)\n          const token1 = createTokenFromSubgraph(pool.token1, chainId)\n          \n          // Converti il feeTier da stringa a FeeAmount\n          let fee: FeeAmount\n          switch (pool.feeTier) {\n            case '100':\n              fee = FeeAmount.LOWEST\n              break\n            case '500':\n              fee = FeeAmount.LOW\n              break\n            case '3000':\n              fee = FeeAmount.MEDIUM\n              break\n            case '10000':\n              fee = FeeAmount.HIGH\n              break\n            default:\n              fee = FeeAmount.MEDIUM\n          }\n\n          return {\n            token0,\n            token1,\n            fee,\n            liquidity: pool.liquidity,\n            volume24h: formatVolume(pool.volumeUSD),\n            fees24h: formatVolume(pool.feesUSD),\n            apr: calculateAPR(pool.feesUSD, pool.totalValueLockedUSD),\n            tvlUSD: formatLiquidity(pool.totalValueLockedUSD),\n          }\n        })\n\n        setPools(formattedPools)\n      } catch (err) {\n        console.error('Error loading pools:', err)\n        setError(err instanceof Error ? err.message : 'Unknown error')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    loadPools()\n  }, [chainId])\n\n  return { pools, loading, error }\n}\n","import { FeeAmount } from '@uniswap/v3-sdk'\nimport { Currency, Token } from '@synthra-swap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { ButtonPrimary } from 'components/Button'\nimport { DarkCard, LightCard } from 'components/Card'\nimport { AutoColumn } from 'components/Column'\nimport DoubleCurrencyLogo from 'components/DoubleLogo'\nimport { LoadingRows } from 'components/Loader/styled'\nimport { RowBetween, RowFixed } from 'components/Row'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { PoolState, usePool } from 'hooks/usePools'\nimport { useSubgraphPools } from 'hooks/useSubgraphPools'\nimport { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled, { useTheme } from 'styled-components'\nimport { ThemedText } from 'theme/components'\nimport { currencyId } from 'utils/currencyId'\n\nconst PageWrapper = styled.div`\n  padding: 100px 24px 0px;\n  max-width: 1200px;\n  width: 100%;\n  margin: 0 auto;\n\n  @media (max-width: ${({ theme }) => `${theme.breakpoint.lg}px`}) {\n    max-width: 1000px;\n    padding: 80px 20px 0px;\n  }\n\n  @media (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    max-width: 800px;\n    padding: 60px 16px 0px;\n  }\n\n  @media (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    max-width: 100%;\n    padding: 40px 12px 0px;\n  }\n`\n\nconst HeaderSection = styled.div`\n  text-align: center;\n  margin-bottom: 48px;\n  \n  @media (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    margin-bottom: 32px;\n  }\n`\n\nconst MainTitle = styled.h1`\n  font-size: 48px;\n  font-weight: 600;\n  color: ${({ theme }) => theme.neutral1};\n  margin: 0 0 16px 0;\n  background: linear-gradient(135deg, ${({ theme }) => theme.accent1} 0%, ${({ theme }) => theme.accent2} 100%);\n  background-clip: text;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  \n  @media (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    font-size: 36px;\n  }\n  \n  @media (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    font-size: 28px;\n  }\n`\n\nconst Subtitle = styled.p`\n  font-size: 18px;\n  color: ${({ theme }) => theme.neutral2};\n  margin: 0 auto;\n  max-width: 600px;\n  line-height: 1.5;\n  \n  @media (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    font-size: 16px;\n  }\n`\n\nconst StatsHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 24px;\n  padding: 0 4px;\n  \n  @media (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    flex-direction: column;\n    gap: 16px;\n    align-items: flex-start;\n  }\n`\n\nconst PoolCount = styled.div`\n  color: ${({ theme }) => theme.neutral2};\n  font-size: 16px;\n  font-weight: 500;\n`\n\nconst StyledPoolCard = styled.div`\n  background: ${({ theme }) => theme.surface1};\n  border: 1px solid ${({ theme }) => theme.surface3};\n  border-radius: 24px;\n  padding: 24px;\n  transition: all 0.2s ease-in-out;\n  position: relative;\n  overflow: hidden;\n\n  &:before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 3px;\n    background: linear-gradient(90deg, ${({ theme }) => theme.accent1} 0%, ${({ theme }) => theme.accent2} 100%);\n    opacity: 0;\n    transition: opacity 0.2s ease;\n  }\n\n  &:hover {\n    border-color: ${({ theme }) => theme.accent1};\n    transform: translateY(-4px);\n    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);\n    \n    &:before {\n      opacity: 1;\n    }\n  }\n`\n\nconst PoolHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 20px;\n  \n  @media (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    flex-direction: column;\n    gap: 16px;\n  }\n`\n\nconst PoolTokens = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n`\n\nconst TokenInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`\n\nconst TokenPair = styled.div`\n  font-size: 20px;\n  font-weight: 600;\n  color: ${({ theme }) => theme.neutral1};\n`\n\nconst FeeTag = styled.div`\n  background: ${({ theme }) => theme.accent1};\n  color: white;\n  padding: 4px 12px;\n  border-radius: 12px;\n  font-size: 12px;\n  font-weight: 600;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n`\n\nconst StatsGrid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 16px;\n  margin-bottom: 20px;\n  \n  @media (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    grid-template-columns: 1fr;\n    gap: 12px;\n  }\n`\n\nconst StatItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`\n\nconst StatLabel = styled.span`\n  font-size: 12px;\n  color: ${({ theme }) => theme.neutral3};\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  font-weight: 500;\n`\n\nconst StatValue = styled.span`\n  font-size: 16px;\n  font-weight: 600;\n  color: ${({ theme }) => theme.neutral1};\n`\n\nconst HighlightStat = styled(StatValue)`\n  color: ${({ theme }) => theme.success};\n  font-size: 18px;\n`\n\nconst StakeButton = styled(ButtonPrimary)`\n  width: 100%;\n  padding: 16px;\n  border-radius: 16px;\n  font-size: 16px;\n  font-weight: 600;\n  background: linear-gradient(135deg, ${({ theme }) => theme.accent1} 0%, ${({ theme }) => theme.accent2} 100%);\n  border: none;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);\n  }\n  \n  &:active {\n    transform: translateY(0);\n  }\n  \n  @media (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    padding: 14px;\n    font-size: 15px;\n  }\n`\n\nconst LoadingContainer = styled.div`\n  background: ${({ theme }) => theme.surface1};\n  border: 1px solid ${({ theme }) => theme.surface3};\n  border-radius: 24px;\n  padding: 60px 40px;\n  text-align: center;\n`\n\nconst EmptyContainer = styled.div`\n  background: ${({ theme }) => theme.surface1};\n  border: 1px solid ${({ theme }) => theme.surface3};\n  border-radius: 24px;\n  padding: 60px 40px;\n  text-align: center;\n`\n\nconst ErrorContainer = styled.div`\n  background: ${({ theme }) => theme.surface1};\n  border: 2px solid ${({ theme }) => theme.critical};\n  border-radius: 24px;\n  padding: 40px;\n  text-align: center;\n`\n\nconst GridContainer = styled.div`\n  display: grid;\n  gap: 24px;\n  grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));\n  \n  @media (max-width: ${({ theme }) => `${theme.breakpoint.lg}px`}) {\n    grid-template-columns: repeat(auto-fill, minmax(340px, 1fr));\n    gap: 20px;\n  }\n  \n  @media (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n    gap: 16px;\n  }\n  \n  @media (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    grid-template-columns: 1fr;\n    gap: 16px;\n  }\n`\n\ninterface PoolInfo {\n  token0: Currency\n  token1: Currency\n  fee: FeeAmount\n  liquidity?: string\n  volume24h?: string\n  fees24h?: string\n  apr?: string\n  tvlUSD?: string\n}\n\nfunction PoolCard({ poolInfo }: { poolInfo: PoolInfo }) {\n  const theme = useTheme()\n  const [poolState, pool] = usePool(poolInfo.token0, poolInfo.token1, poolInfo.fee)\n  \n  const isLoading = poolState === PoolState.LOADING\n  const feePercentage = poolInfo.fee / 10000\n\n  if (isLoading) {\n    return (\n      <StyledPoolCard>\n        <LoadingRows>\n          <div />\n          <div />\n          <div />\n        </LoadingRows>\n      </StyledPoolCard>\n    )\n  }\n\n  return (\n    <StyledPoolCard>\n      <PoolHeader>\n        <PoolTokens>\n          <DoubleCurrencyLogo currency0={poolInfo.token0} currency1={poolInfo.token1} size={32} />\n          <TokenInfo>\n            <TokenPair>\n              {poolInfo.token0.symbol}/{poolInfo.token1.symbol}\n            </TokenPair>\n            <FeeTag>{feePercentage}% Fee</FeeTag>\n          </TokenInfo>\n        </PoolTokens>\n      </PoolHeader>\n      \n      <StatsGrid>\n        <StatItem>\n          <StatLabel>Total Value Locked</StatLabel>\n          <StatValue>${poolInfo.tvlUSD || '---'}</StatValue>\n        </StatItem>\n        <StatItem>\n          <StatLabel>24h Volume</StatLabel>\n          <StatValue>{poolInfo.volume24h || '---'}</StatValue>\n        </StatItem>\n        <StatItem>\n          <StatLabel>24h Fees</StatLabel>\n          <StatValue>{poolInfo.fees24h || '---'}</StatValue>\n        </StatItem>\n        <StatItem>\n          <StatLabel>APR</StatLabel>\n          <HighlightStat>{poolInfo.apr ? `${poolInfo.apr}%` : '---'}</HighlightStat>\n        </StatItem>\n      </StatsGrid>\n\n      <StakeButton\n        as={Link}\n        to={`/add/${currencyId(poolInfo.token0)}/${currencyId(poolInfo.token1)}/${poolInfo.fee}`}\n      >\n        <p>Add Liquidity & Earn</p>\n      </StakeButton>\n    </StyledPoolCard>\n  )\n}\n\nexport default function Earn() {\n  const theme = useTheme()\n  const { chainId } = useWeb3React()\n  const { pools, loading, error } = useSubgraphPools()\n\n  if (!chainId) {\n    return (\n      <PageWrapper>\n        <HeaderSection>\n          <MainTitle>Connect Wallet</MainTitle>\n          <Subtitle>Connect your wallet to explore earning opportunities</Subtitle>\n        </HeaderSection>\n        <EmptyContainer>\n          <ThemedText.HeadlineSmall style={{ marginBottom: '16px' }}>\n            <p>🔗 Wallet Connection Required</p>\n          </ThemedText.HeadlineSmall>\n          <ThemedText.BodyPrimary>\n            <p>Connect your wallet to view the top liquidity pools and start earning rewards.</p>\n          </ThemedText.BodyPrimary>\n        </EmptyContainer>\n      </PageWrapper>\n    )\n  }\n\n  return (\n    <PageWrapper>\n      <HeaderSection>\n        <MainTitle>Earn Rewards</MainTitle>\n        <Subtitle>\n          Provide liquidity to top-performing pools and earn trading fees plus rewards. \n          Higher TVL pools typically offer more stable and consistent returns.\n        </Subtitle>\n      </HeaderSection>\n\n      {error ? (\n        <ErrorContainer>\n          <ThemedText.HeadlineSmall style={{ marginBottom: '16px', color: theme.critical }}>\n            <p>⚠️ Connection Error</p>\n          </ThemedText.HeadlineSmall>\n          <ThemedText.BodyPrimary color={theme.critical} style={{ marginBottom: '8px' }}>\n            <p>Failed to load pool data: {error}</p>\n          </ThemedText.BodyPrimary>\n          <ThemedText.Caption style={{ color: theme.neutral2 }}>\n            <p>Please check your connection and try again</p>\n          </ThemedText.Caption>\n        </ErrorContainer>\n      ) : loading ? (\n        <LoadingContainer>\n          <ThemedText.HeadlineSmall style={{ marginBottom: '24px' }}>\n            <p>🔄 Loading Pools...</p>\n          </ThemedText.HeadlineSmall>\n          <ThemedText.BodyPrimary style={{ marginBottom: '20px' }}>\n            <p>Fetching the latest pool data from the network</p>\n          </ThemedText.BodyPrimary>\n          <LoadingRows>\n            <div />\n            <div />\n            <div />\n          </LoadingRows>\n        </LoadingContainer>\n      ) : pools.length === 0 ? (\n        <EmptyContainer>\n          <ThemedText.HeadlineSmall style={{ marginBottom: '16px' }}>\n            <p>📊 No Pools Available</p>\n          </ThemedText.HeadlineSmall>\n          <ThemedText.BodyPrimary>\n            <p>No liquidity pools are currently available on this network. Try switching to a different network.</p>\n          </ThemedText.BodyPrimary>\n        </EmptyContainer>\n      ) : (\n        <>\n          <StatsHeader>\n            <PoolCount>\n              <p>Showing {pools.length} top liquidity pools</p>\n            </PoolCount>\n          </StatsHeader>\n          <GridContainer>\n            {pools.map((poolInfo, index) => (\n              <PoolCard\n                key={`${poolInfo.token0.wrapped.address}-${poolInfo.token1.wrapped.address}-${poolInfo.fee}`}\n                poolInfo={poolInfo}\n              />\n            ))}\n          </GridContainer>\n        </>\n      )}\n    </PageWrapper>\n  )\n}\n","import { Interface } from '@ethersproject/abi'\nimport IUniswapV3PoolStateJSON from '@uniswap/v3-core/artifacts/contracts/interfaces/pool/IUniswapV3PoolState.sol/IUniswapV3PoolState.json'\nimport { computePoolAddress } from '@uniswap/v3-sdk'\nimport { FeeAmount, Pool } from '@uniswap/v3-sdk'\nimport { BigintIsh, Currency, Token, V3_CORE_FACTORY_ADDRESSES } from '@synthra-swap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport JSBI from 'jsbi'\nimport { useMultipleContractSingleData } from 'lib/hooks/multicall'\nimport { useMemo } from 'react'\n\nimport { IUniswapV3PoolStateInterface } from '../types/v3/IUniswapV3PoolState'\n\nconst POOL_STATE_INTERFACE = new Interface(IUniswapV3PoolStateJSON.abi) as IUniswapV3PoolStateInterface\n\n// Classes are expensive to instantiate, so this caches the recently instantiated pools.\n// This avoids re-instantiating pools as the other pools in the same request are loaded.\nclass PoolCache {\n  // Evict after 128 entries. Empirically, a swap uses 64 entries.\n  private static MAX_ENTRIES = 128\n\n  // These are FIFOs, using unshift/pop. This makes recent entries faster to find.\n  private static pools: Pool[] = []\n  private static addresses: { key: string; address: string }[] = []\n\n  static getPoolAddress(factoryAddress: string, tokenA: Token, tokenB: Token, fee: FeeAmount): string {\n    if (this.addresses.length > this.MAX_ENTRIES) {\n      this.addresses = this.addresses.slice(0, this.MAX_ENTRIES / 2)\n    }\n\n    const { address: addressA } = tokenA\n    const { address: addressB } = tokenB\n    const key = `${factoryAddress}:${addressA}:${addressB}:${fee.toString()}`\n    const found = this.addresses.find((address) => address.key === key)\n    if (found) return found.address\n\n    const address = {\n      key,\n      address: computePoolAddress({\n        factoryAddress,\n        tokenA,\n        tokenB,\n        fee,\n        initCodeHashManualOverride: \"0x499aba1e2f07d97749c4eabd822eca2efa521b1d6e34a67285e4a3cb773905dd\",\n      }),\n    }\n    this.addresses.unshift(address)\n    return address.address\n  }\n\n  static getPool(\n    tokenA: Token,\n    tokenB: Token,\n    fee: FeeAmount,\n    sqrtPriceX96: BigintIsh,\n    liquidity: BigintIsh,\n    tick: number\n  ): Pool {\n    if (this.pools.length > this.MAX_ENTRIES) {\n      this.pools = this.pools.slice(0, this.MAX_ENTRIES / 2)\n    }\n\n    const found = this.pools.find(\n      (pool) =>\n        pool.token0 === tokenA &&\n        pool.token1 === tokenB &&\n        pool.fee === fee &&\n        JSBI.EQ(pool.sqrtRatioX96, sqrtPriceX96) &&\n        JSBI.EQ(pool.liquidity, liquidity) &&\n        pool.tickCurrent === tick\n    )\n    if (found) return found\n\n    const pool = new Pool(tokenA, tokenB, fee, sqrtPriceX96, liquidity, tick)\n    this.pools.unshift(pool)\n    return pool\n  }\n}\n\nexport enum PoolState {\n  LOADING,\n  NOT_EXISTS,\n  EXISTS,\n  INVALID,\n}\n\nfunction usePools(\n  poolKeys: [Currency | undefined, Currency | undefined, FeeAmount | undefined][]\n): [PoolState, Pool | null][] {\n  const { chainId } = useWeb3React()\n  console.log(\"CHAIN ID@@@@@@@@@@@@\", chainId)\n\n  const poolTokens: ([Token, Token, FeeAmount] | undefined)[] = useMemo(() => {\n    if (!chainId) return new Array(poolKeys.length)\n\n    return poolKeys.map(([currencyA, currencyB, feeAmount]) => {\n      if (currencyA && currencyB && feeAmount) {\n        const tokenA = currencyA.wrapped\n        const tokenB = currencyB.wrapped\n        if (tokenA.equals(tokenB)) return undefined\n\n        return tokenA.sortsBefore(tokenB) ? [tokenA, tokenB, feeAmount] : [tokenB, tokenA, feeAmount]\n      }\n      return undefined\n    })\n  }, [chainId, poolKeys])\n  console.log(\"poolTokens@@@@@@@@@@@@\", poolTokens)\n\n  const poolAddresses: (string | undefined)[] = useMemo(() => {\n    console.log(\"CIAO CIAO ENTRATO\")\n    const v3CoreFactoryAddress = chainId && V3_CORE_FACTORY_ADDRESSES[chainId]\n    console.log(\"V3_CORE_FACTORY_ADDRESSES@@@@@@@@@@@@\", v3CoreFactoryAddress)\n    if (!v3CoreFactoryAddress) return new Array(poolTokens.length)\n\n    return poolTokens.map((value) => value && PoolCache.getPoolAddress(v3CoreFactoryAddress, ...value))\n  }, [chainId, poolTokens])\n  console.log(\"poolAddresses@@@@@@@@@@@@\", poolAddresses)\n\n  const slot0s = useMultipleContractSingleData(poolAddresses, POOL_STATE_INTERFACE, 'slot0')\n  const liquidities = useMultipleContractSingleData(poolAddresses, POOL_STATE_INTERFACE, 'liquidity')\n\n  return useMemo(() => {\n    return poolKeys.map((_key, index) => {\n      const tokens = poolTokens[index]\n      if (!tokens) return [PoolState.INVALID, null]\n      const [token0, token1, fee] = tokens\n\n      if (!slot0s[index]) return [PoolState.INVALID, null]\n      const { result: slot0, loading: slot0Loading, valid: slot0Valid } = slot0s[index]\n\n      if (!liquidities[index]) return [PoolState.INVALID, null]\n      const { result: liquidity, loading: liquidityLoading, valid: liquidityValid } = liquidities[index]\n\n      if (!tokens || !slot0Valid || !liquidityValid) return [PoolState.INVALID, null]\n      if (slot0Loading || liquidityLoading) return [PoolState.LOADING, null]\n      if (!slot0 || !liquidity) return [PoolState.NOT_EXISTS, null]\n      if (!slot0.sqrtPriceX96 || slot0.sqrtPriceX96.eq(0)) return [PoolState.NOT_EXISTS, null]\n\n      try {\n        const pool = PoolCache.getPool(token0, token1, fee, slot0.sqrtPriceX96, liquidity[0], slot0.tick)\n        return [PoolState.EXISTS, pool]\n      } catch (error) {\n        console.error('Error when constructing the pool', error)\n        return [PoolState.NOT_EXISTS, null]\n      }\n    })\n  }, [liquidities, poolKeys, slot0s, poolTokens])\n}\n\nexport function usePool(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined,\n  feeAmount: FeeAmount | undefined\n): [PoolState, Pool | null] {\n  const poolKeys: [Currency | undefined, Currency | undefined, FeeAmount | undefined][] = useMemo(\n    () => [[currencyA, currencyB, feeAmount]],\n    [currencyA, currencyB, feeAmount]\n  )\n\n  console.log(\"kiacic@@@@@@@@@@@@\", poolKeys)\n\n \n  return usePools(poolKeys)[0]\n}\n"],"names":["SUBGRAPH_URL","POOLS_QUERY","createTokenFromSubgraph","tokenData","chainId","Token","id","parseInt","decimals","symbol","name","formatLiquidity","valueUSD","value","parseFloat","toFixed","formatVolume","volumeUSD","calculateAPR","feesUSD","totalValueLockedUSD","fees","tvl","useSubgraphPools","useWeb3React","pools","setPools","useState","loading","setLoading","error","setError","useEffect","async","subgraphPools","_data$data","response","fetch","method","headers","body","JSON","stringify","query","ok","Error","status","data","json","errors","console","fetchSubgraphData","formattedPools","map","pool","token0","token1","fee","feeTier","FeeAmount","LOWEST","LOW","MEDIUM","HIGH","liquidity","volume24h","fees24h","apr","tvlUSD","err","message","loadPools","PageWrapper","styled","div","_ref","theme","breakpoint","lg","_ref2","md","_ref3","sm","HeaderSection","_ref4","MainTitle","h1","_ref5","neutral1","_ref6","accent1","_ref7","accent2","_ref8","_ref9","Subtitle","p","_ref10","neutral2","_ref11","StatsHeader","_ref12","PoolCount","_ref13","StyledPoolCard","_ref14","surface1","_ref15","surface3","_ref16","_ref17","_ref18","PoolHeader","_ref19","PoolTokens","TokenInfo","TokenPair","_ref20","FeeTag","_ref21","StatsGrid","_ref22","StatItem","StatLabel","span","_ref23","neutral3","StatValue","_ref24","HighlightStat","_ref25","success","StakeButton","ButtonPrimary","_ref26","_ref27","_ref28","LoadingContainer","_ref29","_ref30","EmptyContainer","_ref31","_ref32","ErrorContainer","_ref33","_ref34","critical","GridContainer","_ref35","_ref36","_ref37","PoolCard","_ref38","poolInfo","useTheme","poolState","usePool","isLoading","PoolState","LOADING","feePercentage","_jsx","children","_jsxs","LoadingRows","DoubleCurrencyLogo","currency0","currency1","size","as","Link","to","currencyId","Earn","ThemedText","HeadlineSmall","style","marginBottom","color","BodyPrimary","Caption","length","_Fragment","index","wrapped","address","POOL_STATE_INTERFACE","Interface","IUniswapV3PoolStateJSON","PoolCache","getPoolAddress","factoryAddress","tokenA","tokenB","this","addresses","MAX_ENTRIES","slice","addressA","addressB","key","toString","found","find","computePoolAddress","initCodeHashManualOverride","unshift","getPool","sqrtPriceX96","tick","JSBI","sqrtRatioX96","tickCurrent","Pool","currencyA","currencyB","feeAmount","poolKeys","useMemo","log","poolTokens","equals","sortsBefore","Array","poolAddresses","v3CoreFactoryAddress","V3_CORE_FACTORY_ADDRESSES","slot0s","useMultipleContractSingleData","liquidities","_key","tokens","INVALID","result","slot0","slot0Loading","valid","slot0Valid","liquidityLoading","liquidityValid","NOT_EXISTS","eq","EXISTS","usePools"],"sourceRoot":""}