{"version":3,"file":"static/js/2911.56539bdd.chunk.js","mappings":"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","sources":["utils/unwrappedToken.ts","state/stake/hooks.tsx","pages/Pool/v2.tsx"],"sourcesContent":["import { Currency } from '@synthra-swap/sdk-core'\nimport { asSupportedChain } from 'constants/chains'\n\nimport { nativeOnChain, WRAPPED_NATIVE_CURRENCY } from '../constants/tokens'\n\nexport function unwrappedToken(currency: Currency): Currency {\n  if (currency.isNative) return currency\n  const formattedChainId = asSupportedChain(currency.chainId)\n  if (formattedChainId && WRAPPED_NATIVE_CURRENCY[formattedChainId]?.equals(currency))\n    return nativeOnChain(currency.chainId)\n  return currency\n}\n","import { Interface } from '@ethersproject/abi'\nimport StakingRewardsJSON from '@uniswap/liquidity-staker/build/StakingRewards.json'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { ChainId, CurrencyAmount, Token } from '@synthra-swap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport useCurrentBlockTimestamp from 'hooks/useCurrentBlockTimestamp'\nimport JSBI from 'jsbi'\nimport { NEVER_RELOAD, useMultipleContractSingleData } from 'lib/hooks/multicall'\nimport { useMemo } from 'react'\n\nimport { DAI, UNI, USDC_MAINNET, USDT, WBTC, WRAPPED_NATIVE_CURRENCY } from '../../constants/tokens'\n\nconst STAKING_REWARDS_INTERFACE = new Interface(StakingRewardsJSON.abi)\n\nexport const STAKING_GENESIS = 1600387200\n\nconst STAKING_REWARDS_INFO: {\n  [chainId: number]: {\n    tokens: [Token, Token]\n    stakingRewardAddress: string\n  }[]\n} = {\n  1: [\n    {\n      tokens: [WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET] as Token, DAI],\n      stakingRewardAddress: '0xa1484C3aa22a66C62b77E0AE78E15258bd0cB711',\n    },\n    {\n      tokens: [WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET] as Token, USDC_MAINNET],\n      stakingRewardAddress: '0x7FBa4B8Dc5E7616e59622806932DBea72537A56b',\n    },\n    {\n      tokens: [WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET] as Token, USDT],\n      stakingRewardAddress: '0x6C3e4cb2E96B01F4b866965A91ed4437839A121a',\n    },\n    {\n      tokens: [WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET] as Token, WBTC],\n      stakingRewardAddress: '0xCA35e32e7926b96A9988f61d510E038108d8068e',\n    },\n  ],\n}\n\ninterface StakingInfo {\n  // the address of the reward contract\n  stakingRewardAddress: string\n  // the tokens involved in this pair\n  tokens: [Token, Token]\n  // the amount of token currently staked, or undefined if no account\n  stakedAmount: CurrencyAmount<Token>\n  // the amount of reward token earned by the active account, or undefined if no account\n  earnedAmount: CurrencyAmount<Token>\n  // the total amount of token staked in the contract\n  totalStakedAmount: CurrencyAmount<Token>\n  // the amount of token distributed per second to all LPs, constant\n  totalRewardRate: CurrencyAmount<Token>\n  // the current amount of token distributed to the active account per second.\n  // equivalent to percent of total supply * reward rate\n  rewardRate: CurrencyAmount<Token>\n  // when the period ends\n  periodFinish?: Date\n  // if pool is active\n  active: boolean\n  // calculates a hypothetical amount of token distributed to the active account per second.\n  getHypotheticalRewardRate: (\n    stakedAmount: CurrencyAmount<Token>,\n    totalStakedAmount: CurrencyAmount<Token>,\n    totalRewardRate: CurrencyAmount<Token>\n  ) => CurrencyAmount<Token>\n}\n\n// gets the staking info from the network for the active chain id\nexport function useStakingInfo(pairToFilterBy?: Pair | null): StakingInfo[] {\n  const { chainId, account } = useWeb3React()\n\n  // detect if staking is ended\n  const currentBlockTimestamp = useCurrentBlockTimestamp()\n\n  const info = useMemo(\n    () =>\n      chainId\n        ? STAKING_REWARDS_INFO[chainId]?.filter((stakingRewardInfo) =>\n            pairToFilterBy === undefined\n              ? true\n              : pairToFilterBy === null\n              ? false\n              : pairToFilterBy.involvesToken(stakingRewardInfo.tokens[0]) &&\n                pairToFilterBy.involvesToken(stakingRewardInfo.tokens[1])\n          ) ?? []\n        : [],\n    [chainId, pairToFilterBy]\n  )\n\n  const uni = chainId ? UNI[chainId] : undefined\n\n  const rewardsAddresses = useMemo(() => info.map(({ stakingRewardAddress }) => stakingRewardAddress), [info])\n\n  const accountArg = useMemo(() => [account ?? undefined], [account])\n\n  // get all the info from the staking rewards contracts\n  const balances = useMultipleContractSingleData(rewardsAddresses, STAKING_REWARDS_INTERFACE, 'balanceOf', accountArg)\n  const earnedAmounts = useMultipleContractSingleData(rewardsAddresses, STAKING_REWARDS_INTERFACE, 'earned', accountArg)\n  const totalSupplies = useMultipleContractSingleData(rewardsAddresses, STAKING_REWARDS_INTERFACE, 'totalSupply')\n\n  // tokens per second, constants\n  const rewardRates = useMultipleContractSingleData(\n    rewardsAddresses,\n    STAKING_REWARDS_INTERFACE,\n    'rewardRate',\n    undefined,\n    NEVER_RELOAD\n  )\n  const periodFinishes = useMultipleContractSingleData(\n    rewardsAddresses,\n    STAKING_REWARDS_INTERFACE,\n    'periodFinish',\n    undefined,\n    NEVER_RELOAD\n  )\n\n  return useMemo(() => {\n    if (!chainId || !uni) return []\n\n    return rewardsAddresses.reduce<StakingInfo[]>((memo, rewardsAddress, index) => {\n      // these two are dependent on account\n      const balanceState = balances[index]\n      const earnedAmountState = earnedAmounts[index]\n\n      // these get fetched regardless of account\n      const totalSupplyState = totalSupplies[index]\n      const rewardRateState = rewardRates[index]\n      const periodFinishState = periodFinishes[index]\n\n      if (\n        // these may be undefined if not logged in\n        !balanceState?.loading &&\n        !earnedAmountState?.loading &&\n        // always need these\n        totalSupplyState &&\n        !totalSupplyState.loading &&\n        rewardRateState &&\n        !rewardRateState.loading &&\n        periodFinishState &&\n        !periodFinishState.loading\n      ) {\n        if (\n          balanceState?.error ||\n          earnedAmountState?.error ||\n          totalSupplyState.error ||\n          rewardRateState.error ||\n          periodFinishState.error\n        ) {\n          console.error('Failed to load staking rewards info')\n          return memo\n        }\n\n        // get the LP token\n        const tokens = info[index].tokens\n        const dummyPair = new Pair(\n          CurrencyAmount.fromRawAmount(tokens[0], '0'),\n          CurrencyAmount.fromRawAmount(tokens[1], '0')\n        )\n\n        // check for account, if no account set to 0\n\n        const stakedAmount = CurrencyAmount.fromRawAmount(\n          dummyPair.liquidityToken,\n          JSBI.BigInt(balanceState?.result?.[0] ?? 0)\n        )\n        const totalStakedAmount = CurrencyAmount.fromRawAmount(\n          dummyPair.liquidityToken,\n          JSBI.BigInt(totalSupplyState.result?.[0])\n        )\n        const totalRewardRate = CurrencyAmount.fromRawAmount(uni, JSBI.BigInt(rewardRateState.result?.[0]))\n\n        const getHypotheticalRewardRate = (\n          stakedAmount: CurrencyAmount<Token>,\n          totalStakedAmount: CurrencyAmount<Token>,\n          totalRewardRate: CurrencyAmount<Token>\n        ): CurrencyAmount<Token> => {\n          return CurrencyAmount.fromRawAmount(\n            uni,\n            JSBI.greaterThan(totalStakedAmount.quotient, JSBI.BigInt(0))\n              ? JSBI.divide(JSBI.multiply(totalRewardRate.quotient, stakedAmount.quotient), totalStakedAmount.quotient)\n              : JSBI.BigInt(0)\n          )\n        }\n\n        const individualRewardRate = getHypotheticalRewardRate(stakedAmount, totalStakedAmount, totalRewardRate)\n\n        const periodFinishSeconds = periodFinishState.result?.[0]?.toNumber()\n        const periodFinishMs = periodFinishSeconds * 1000\n\n        // compare period end timestamp vs current block timestamp (in seconds)\n        const active =\n          periodFinishSeconds && currentBlockTimestamp ? periodFinishSeconds > currentBlockTimestamp.toNumber() : true\n\n        memo.push({\n          stakingRewardAddress: rewardsAddress,\n          tokens: info[index].tokens,\n          periodFinish: periodFinishMs > 0 ? new Date(periodFinishMs) : undefined,\n          earnedAmount: CurrencyAmount.fromRawAmount(uni, JSBI.BigInt(earnedAmountState?.result?.[0] ?? 0)),\n          rewardRate: individualRewardRate,\n          totalRewardRate,\n          stakedAmount,\n          totalStakedAmount,\n          getHypotheticalRewardRate,\n          active,\n        })\n      }\n      return memo\n    }, [])\n  }, [\n    balances,\n    chainId,\n    currentBlockTimestamp,\n    earnedAmounts,\n    info,\n    periodFinishes,\n    rewardRates,\n    rewardsAddresses,\n    totalSupplies,\n    uni,\n  ])\n}\n","import { Trans } from '@lingui/macro'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { V2Unsupported } from 'components/V2Unsupported'\nimport { useNetworkSupportsV2 } from 'hooks/useNetworkSupportsV2'\nimport JSBI from 'jsbi'\nimport { useMemo } from 'react'\nimport { ChevronsRight } from 'react-feather'\nimport { Link } from 'react-router-dom'\nimport { Text } from 'rebass'\nimport styled, { useTheme } from 'styled-components'\nimport { ExternalLink, HideSmall, ThemedText } from 'theme/components'\n\nimport { ButtonOutlined, ButtonPrimary, ButtonSecondary } from '../../components/Button'\nimport Card from '../../components/Card'\nimport { AutoColumn } from '../../components/Column'\nimport { CardBGImage, CardNoise, CardSection, DataCard } from '../../components/earn/styled'\nimport FullPositionCard from '../../components/PositionCard'\nimport { RowBetween, RowFixed } from '../../components/Row'\nimport { Dots } from '../../components/swap/styled'\nimport { SwitchLocaleLink } from '../../components/SwitchLocaleLink'\nimport { BIG_INT_ZERO } from '../../constants/misc'\nimport { useV2Pairs } from '../../hooks/useV2Pairs'\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/connection/hooks'\nimport { useStakingInfo } from '../../state/stake/hooks'\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks'\n\nconst PageWrapper = styled(AutoColumn)`\n  max-width: 640px;\n  width: 100%;\n\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\n    padding: 0px 8px;\n  `};\n`\n\nconst LPFeeExplainer = styled(DataCard)`\n  background: radial-gradient(76.02% 75.41% at 1.84% 0%, #27ae60 0%, #000000 100%);\n  margin: 0 0 16px 0;\n  overflow: hidden;\n`\n\nconst TitleRow = styled(RowBetween)`\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\n    flex-wrap: wrap;\n    gap: 12px;\n    width: 100%;\n    flex-direction: column-reverse;\n  `};\n`\n\nconst ButtonRow = styled(RowFixed)`\n  gap: 8px;\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\n    width: 100%;\n    flex-direction: row-reverse;\n    justify-content: space-between;\n  `};\n`\n\nconst ResponsiveButtonPrimary = styled(ButtonPrimary)`\n  height: 40px;\n  width: fit-content;\n  border-radius: 12px;\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\n    width: 48%;\n  `};\n`\n\nconst ResponsiveButtonSecondary = styled(ButtonSecondary)`\n  height: 40px;\n  width: fit-content;\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\n    width: 48%;\n  `};\n`\n\nconst EmptyProposals = styled.div`\n  border: 1px solid ${({ theme }) => theme.neutral2};\n  padding: 16px 12px;\n  border-radius: 12px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\n\nexport default function Pool() {\n  const theme = useTheme()\n  const { account } = useWeb3React()\n  const networkSupportsV2 = useNetworkSupportsV2()\n\n  // fetch the user's balances of all tracked V2 LP tokens\n  let trackedTokenPairs = useTrackedTokenPairs()\n  if (!networkSupportsV2) trackedTokenPairs = []\n  const tokenPairsWithLiquidityTokens = useMemo(\n    () => trackedTokenPairs.map((tokens) => ({ liquidityToken: toV2LiquidityToken(tokens), tokens })),\n    [trackedTokenPairs]\n  )\n  const liquidityTokens = useMemo(\n    () => tokenPairsWithLiquidityTokens.map((tpwlt) => tpwlt.liquidityToken),\n    [tokenPairsWithLiquidityTokens]\n  )\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(\n    account ?? undefined,\n    liquidityTokens\n  )\n\n  // fetch the reserves for all V2 pools in which the user has a balance\n  const liquidityTokensWithBalances = useMemo(\n    () =>\n      tokenPairsWithLiquidityTokens.filter(({ liquidityToken }) =>\n        v2PairsBalances[liquidityToken.address]?.greaterThan('0')\n      ),\n    [tokenPairsWithLiquidityTokens, v2PairsBalances]\n  )\n\n  const v2Pairs = useV2Pairs(liquidityTokensWithBalances.map(({ tokens }) => tokens))\n  const v2IsLoading =\n    fetchingV2PairBalances || v2Pairs?.length < liquidityTokensWithBalances.length || v2Pairs?.some((V2Pair) => !V2Pair)\n\n  const allV2PairsWithLiquidity = v2Pairs.map(([, pair]) => pair).filter((v2Pair): v2Pair is Pair => Boolean(v2Pair))\n\n  // show liquidity even if its deposited in rewards contract\n  const stakingInfo = useStakingInfo()\n  const stakingInfosWithBalance = stakingInfo?.filter((pool) =>\n    JSBI.greaterThan(pool.stakedAmount.quotient, BIG_INT_ZERO)\n  )\n  const stakingPairs = useV2Pairs(stakingInfosWithBalance?.map((stakingInfo) => stakingInfo.tokens))\n\n  // remove any pairs that also are included in pairs with stake in mining pool\n  const v2PairsWithoutStakedAmount = allV2PairsWithLiquidity.filter((v2Pair) => {\n    return (\n      stakingPairs\n        ?.map((stakingPair) => stakingPair[1])\n        .filter((stakingPair) => stakingPair?.liquidityToken.address === v2Pair.liquidityToken.address).length === 0\n    )\n  })\n\n  return (\n    <>\n      <PageWrapper>\n        <LPFeeExplainer>\n          <CardBGImage />\n          <CardNoise />\n          <CardSection>\n            <AutoColumn gap=\"md\">\n              <RowBetween>\n                <ThemedText.DeprecatedWhite fontWeight={535}>\n                  <Trans>Liquidity provider rewards</Trans>\n                </ThemedText.DeprecatedWhite>\n              </RowBetween>\n              <RowBetween>\n                <ThemedText.DeprecatedWhite fontSize={14}>\n                  <Trans>\n                    Liquidity providers earn a 0.3% fee on all trades proportional to their share of the pool. Fees are\n                    added to the pool, accrue in real time and can be claimed by withdrawing your liquidity.\n                  </Trans>\n                </ThemedText.DeprecatedWhite>\n              </RowBetween>\n              <ExternalLink\n                style={{ color: theme.white, textDecoration: 'underline' }}\n                target=\"_blank\"\n                href=\"https://docs.uniswap.org/contracts/v2/concepts/core-concepts/pools\"\n              >\n                <ThemedText.DeprecatedWhite fontSize={14}>\n                  <Trans>Read more about providing liquidity</Trans>\n                </ThemedText.DeprecatedWhite>\n              </ExternalLink>\n            </AutoColumn>\n          </CardSection>\n          <CardBGImage />\n          <CardNoise />\n        </LPFeeExplainer>\n\n        {!networkSupportsV2 ? (\n          <V2Unsupported />\n        ) : (\n          <AutoColumn gap=\"lg\" justify=\"center\">\n            <AutoColumn gap=\"md\" style={{ width: '100%' }}>\n              <TitleRow style={{ marginTop: '1rem' }} padding=\"0\">\n                <HideSmall>\n                  <ThemedText.DeprecatedMediumHeader style={{ marginTop: '0.5rem', justifySelf: 'flex-start' }}>\n                    <Trans>Your V2 liquidity</Trans>\n                  </ThemedText.DeprecatedMediumHeader>\n                </HideSmall>\n                <ButtonRow>\n                  <ResponsiveButtonSecondary as={Link} padding=\"6px 8px\" to=\"/add/v2/ETH\">\n                    <Trans>Create a pair</Trans>\n                  </ResponsiveButtonSecondary>\n                  <ResponsiveButtonPrimary id=\"find-pool-button\" as={Link} to=\"/pools/v2/find\" padding=\"6px 8px\">\n                    <Text fontWeight={535} fontSize={16}>\n                      <Trans>Import pool</Trans>\n                    </Text>\n                  </ResponsiveButtonPrimary>\n                  <ResponsiveButtonPrimary id=\"join-pool-button\" as={Link} to=\"/add/v2/ETH\" padding=\"6px 8px\">\n                    <Text fontWeight={535} fontSize={16}>\n                      <Trans>Add V2 liquidity</Trans>\n                    </Text>\n                  </ResponsiveButtonPrimary>\n                </ButtonRow>\n              </TitleRow>\n\n              {!account ? (\n                <Card padding=\"40px\">\n                  <ThemedText.DeprecatedBody color={theme.neutral3} textAlign=\"center\">\n                    <Trans>Connect to a wallet to view your liquidity.</Trans>\n                  </ThemedText.DeprecatedBody>\n                </Card>\n              ) : v2IsLoading ? (\n                <EmptyProposals>\n                  <ThemedText.DeprecatedBody color={theme.neutral3} textAlign=\"center\">\n                    <Dots>\n                      <Trans>Loading</Trans>\n                    </Dots>\n                  </ThemedText.DeprecatedBody>\n                </EmptyProposals>\n              ) : allV2PairsWithLiquidity?.length > 0 || stakingPairs?.length > 0 ? (\n                <>\n                  <ButtonSecondary>\n                    <RowBetween>\n                      <Trans>\n                        <ExternalLink href={'https://v2.info.uniswap.org/account/' + account}>\n                          Account analytics and accrued fees\n                        </ExternalLink>\n                        <span> ↗ </span>\n                      </Trans>\n                    </RowBetween>\n                  </ButtonSecondary>\n                  {v2PairsWithoutStakedAmount.map((v2Pair) => (\n                    <FullPositionCard key={v2Pair.liquidityToken.address} pair={v2Pair} />\n                  ))}\n                  {stakingPairs.map(\n                    (stakingPair, i) =>\n                      stakingPair[1] && ( // skip pairs that arent loaded\n                        <FullPositionCard\n                          key={stakingInfosWithBalance[i].stakingRewardAddress}\n                          pair={stakingPair[1]}\n                          stakedBalance={stakingInfosWithBalance[i].stakedAmount}\n                        />\n                      )\n                  )}\n                  <RowFixed justify=\"center\" style={{ width: '100%' }}>\n                    <ButtonOutlined\n                      as={Link}\n                      to=\"/migrate/v2\"\n                      id=\"import-pool-link\"\n                      style={{\n                        padding: '8px 16px',\n                        margin: '0 4px',\n                        borderRadius: '12px',\n                        width: 'fit-content',\n                        fontSize: '14px',\n                      }}\n                    >\n                      <ChevronsRight size={16} style={{ marginRight: '8px' }} />\n                      <Trans>Migrate liquidity to V3</Trans>\n                    </ButtonOutlined>\n                  </RowFixed>\n                </>\n              ) : (\n                <EmptyProposals>\n                  <ThemedText.DeprecatedBody color={theme.neutral3} textAlign=\"center\">\n                    <Trans>No liquidity found.</Trans>\n                  </ThemedText.DeprecatedBody>\n                </EmptyProposals>\n              )}\n            </AutoColumn>\n          </AutoColumn>\n        )}\n      </PageWrapper>\n      <SwitchLocaleLink />\n    </>\n  )\n}\n"],"names":["unwrappedToken","currency","_WRAPPED_NATIVE_CURRE","isNative","formattedChainId","asSupportedChain","chainId","WRAPPED_NATIVE_CURRENCY","equals","nativeOnChain","STAKING_REWARDS_INTERFACE","Interface","StakingRewardsJSON","STAKING_REWARDS_INFO","tokens","ChainId","MAINNET","DAI","stakingRewardAddress","USDC_MAINNET","USDT","WBTC","PageWrapper","styled","AutoColumn","_ref","theme","deprecated_mediaWidth","deprecated_upToSmall","LPFeeExplainer","DataCard","TitleRow","RowBetween","_ref2","ButtonRow","RowFixed","_ref3","ResponsiveButtonPrimary","ButtonPrimary","_ref4","ResponsiveButtonSecondary","ButtonSecondary","_ref5","EmptyProposals","div","_ref6","neutral2","Pool","useTheme","account","useWeb3React","networkSupportsV2","useNetworkSupportsV2","trackedTokenPairs","useTrackedTokenPairs","tokenPairsWithLiquidityTokens","useMemo","map","liquidityToken","toV2LiquidityToken","liquidityTokens","tpwlt","v2PairsBalances","fetchingV2PairBalances","useTokenBalancesWithLoadingIndicator","undefined","liquidityTokensWithBalances","filter","_ref7","_v2PairsBalances$liqu","address","greaterThan","v2Pairs","useV2Pairs","_ref8","v2IsLoading","length","some","V2Pair","allV2PairsWithLiquidity","_ref9","pair","v2Pair","Boolean","stakingInfo","pairToFilterBy","currentBlockTimestamp","useCurrentBlockTimestamp","info","_STAKING_REWARDS_INFO","_STAKING_REWARDS_INFO2","stakingRewardInfo","involvesToken","uni","UNI","rewardsAddresses","accountArg","balances","useMultipleContractSingleData","earnedAmounts","totalSupplies","rewardRates","NEVER_RELOAD","periodFinishes","reduce","memo","rewardsAddress","index","balanceState","earnedAmountState","totalSupplyState","rewardRateState","periodFinishState","loading","_balanceState$result$","_balanceState$result","_totalSupplyState$res","_rewardRateState$resu","_periodFinishState$re","_periodFinishState$re2","_earnedAmountState$re","_earnedAmountState$re2","error","console","dummyPair","Pair","CurrencyAmount","fromRawAmount","stakedAmount","JSBI","result","totalStakedAmount","totalRewardRate","getHypotheticalRewardRate","quotient","individualRewardRate","periodFinishSeconds","toNumber","periodFinishMs","active","push","periodFinish","Date","earnedAmount","rewardRate","useStakingInfo","stakingInfosWithBalance","pool","BIG_INT_ZERO","stakingPairs","v2PairsWithoutStakedAmount","stakingPair","_jsxs","_Fragment","children","_jsx","CardBGImage","CardNoise","CardSection","gap","ThemedText","DeprecatedWhite","fontWeight","Trans","id","fontSize","ExternalLink","style","color","white","textDecoration","target","href","justify","width","marginTop","padding","HideSmall","DeprecatedMediumHeader","justifySelf","as","Link","to","Text","DeprecatedBody","neutral3","textAlign","Dots","components","0","1","FullPositionCard","i","stakedBalance","ButtonOutlined","margin","borderRadius","ChevronsRight","size","marginRight","Card","V2Unsupported","SwitchLocaleLink"],"sourceRoot":""}