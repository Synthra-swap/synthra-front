{"version":3,"file":"static/js/2950.c3315b6d.chunk.js","mappings":"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","sources":["hooks/useLeaderboard.ts","pages/Leaderboard/index.tsx"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n\nconst SUBGRAPH_URL = 'https://subgraph.synthra.org/subgraphs/name/ianlapham/uniswap-v3-sub'\n\nexport interface LeaderboardUser {\n  id: string\n  totalVolumeUSD: string\n  totalVolumeETH: string\n  score: string\n  txCount: string\n  firstTransactionTimestamp: string\n  lastTransactionTimestamp: string\n  rank: number\n}\n\nexport interface UserDayData {\n  id: string\n  date: number\n  user: {\n    id: string\n  }\n  dailyVolumeUSD: string\n  dailyVolumeETH: string\n  dailyScore: string\n  dailyTxCount: string\n}\n\nexport interface UserSwap {\n  id: string\n  amountUSD: string\n  timestamp: string\n  pool: {\n    id: string\n    token0: {\n      symbol: string\n    }\n    token1: {\n      symbol: string\n    }\n  }\n}\n\ninterface UserDetails extends LeaderboardUser {\n  swaps: UserSwap[]\n  userDayData: UserDayData[]\n}\n\n// Top users query for leaderboard\nconst TOP_USERS_QUERY = `\n  query GetTopUsers($first: Int!, $skip: Int!) {\n    users(\n      first: $first\n      skip: $skip\n      orderBy: score\n      orderDirection: desc\n      where: { score_gt: \"0\" }\n    ) {\n      id\n      totalVolumeUSD\n      totalVolumeETH\n      score\n      txCount\n      firstTransactionTimestamp\n      lastTransactionTimestamp\n    }\n  }\n`\n\n// User details query for profile\nconst USER_DETAILS_QUERY = `\n  query GetUserDetails($userId: String!) {\n    user(id: $userId) {\n      id\n      totalVolumeUSD\n      totalVolumeETH\n      score\n      txCount\n      firstTransactionTimestamp\n      lastTransactionTimestamp\n      swaps(first: 10, orderBy: timestamp, orderDirection: desc) {\n        id\n        amountUSD\n        timestamp\n        pool {\n          id\n          token0 {\n            symbol\n          }\n          token1 {\n            symbol\n          }\n        }\n      }\n      userDayData(first: 30, orderBy: date, orderDirection: desc) {\n        id\n        date\n        dailyVolumeUSD\n        dailyVolumeETH\n        dailyScore\n        dailyTxCount\n        user {\n          id\n        }\n      }\n    }\n  }\n`\n\n// Daily leaderboard query\nconst DAILY_LEADERS_QUERY = `\n  query GetDailyLeaders($date: Int!) {\n    userDayDatas(\n      first: 10\n      orderBy: dailyVolumeUSD\n      orderDirection: desc\n      where: { \n        date: $date\n        dailyVolumeUSD_gt: \"0\"\n      }\n    ) {\n      id\n      user {\n        id\n      }\n      dailyVolumeUSD\n      dailyScore\n      dailyTxCount\n    }\n  }\n`\n\n// User historical data query for charts\nconst USER_HISTORICAL_DATA_QUERY = `\n  query GetUserHistoricalData($userId: String!, $first: Int!, $orderDirection: String!) {\n    userDayDatas(\n      first: $first\n      orderBy: date\n      orderDirection: $orderDirection\n      where: { \n        user: $userId\n        dailyVolumeUSD_gt: \"0\"\n      }\n    ) {\n      id\n      date\n      dailyVolumeUSD\n      dailyScore\n      dailyTxCount\n      user {\n        id\n      }\n    }\n  }\n`\n\nasync function fetchLeaderboard(first: number = 100, skip: number = 0): Promise<LeaderboardUser[]> {\n  try {\n    const response = await fetch(SUBGRAPH_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: TOP_USERS_QUERY,\n        variables: { first, skip },\n      }),\n    })\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`)\n    }\n\n    const data = await response.json()\n    \n    if (data.errors) {\n      throw new Error(`GraphQL errors: ${JSON.stringify(data.errors)}`)\n    }\n\n    const users = data.data?.users || []\n    \n    // Add rank based on order\n    return users.map((user: any, index: number) => ({\n      ...user,\n      rank: skip + index + 1,\n    }))\n  } catch (error) {\n    console.error('Error fetching leaderboard data:', error)\n    throw error\n  }\n}\n\nasync function fetchUserDetails(userId: string): Promise<UserDetails | null> {\n  try {\n    const response = await fetch(SUBGRAPH_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: USER_DETAILS_QUERY,\n        variables: { userId: userId.toLowerCase() },\n      }),\n    })\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`)\n    }\n\n    const data = await response.json()\n    \n    if (data.errors) {\n      throw new Error(`GraphQL errors: ${JSON.stringify(data.errors)}`)\n    }\n\n    const user = data.data?.user\n    if (!user) return null\n\n    // Calculate rank by counting users with higher score\n    const rankResponse = await fetch(SUBGRAPH_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: `\n          query GetUserRank($score: String!) {\n            users(where: { score_gt: $score }) {\n              id\n            }\n          }\n        `,\n        variables: { score: user.score },\n      }),\n    })\n\n    const rankData = await rankResponse.json()\n    const rank = (rankData.data?.users?.length || 0) + 1\n\n    return {\n      ...user,\n      rank,\n    }\n  } catch (error) {\n    console.error('Error fetching user details:', error)\n    throw error\n  }\n}\n\nasync function fetchDailyLeaders(date?: Date): Promise<UserDayData[]> {\n  const targetDate = date || new Date()\n  const dayTimestamp = Math.floor(targetDate.setUTCHours(0, 0, 0, 0) / 1000)\n\n  try {\n    const response = await fetch(SUBGRAPH_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: DAILY_LEADERS_QUERY,\n        variables: { date: dayTimestamp },\n      }),\n    })\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`)\n    }\n\n    const data = await response.json()\n    \n    if (data.errors) {\n      throw new Error(`GraphQL errors: ${JSON.stringify(data.errors)}`)\n    }\n\n    return data.data?.userDayDatas || []\n  } catch (error) {\n    console.error('Error fetching daily leaders:', error)\n    throw error\n  }\n}\n\nasync function fetchUserHistoricalData(userId: string, first: number = 100, orderDirection: 'asc' | 'desc' = 'desc'): Promise<UserDayData[]> {\n  try {\n    const response = await fetch(SUBGRAPH_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: USER_HISTORICAL_DATA_QUERY,\n        variables: { userId: userId.toLowerCase(), first, orderDirection },\n      }),\n    })\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`)\n    }\n\n    const data = await response.json()\n    \n    if (data.errors) {\n      throw new Error(`GraphQL errors: ${JSON.stringify(data.errors)}`)\n    }\n\n    return data.data?.userDayDatas || []\n  } catch (error) {\n    console.error('Error fetching user historical data:', error)\n    throw error\n  }\n}\n\n// Hook for user historical data\nexport function useUserHistoricalData(userId?: string, days: number = 30) {\n  const [data, setData] = useState<UserDayData[]>([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    if (!userId) return\n\n    const loadData = async () => {\n      setLoading(true)\n      setError(null)\n      \n      try {\n        const historicalData = await fetchUserHistoricalData(userId, days, 'asc')\n        setData(historicalData)\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to load historical data')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    loadData()\n  }, [userId, days])\n\n  return { data, loading, error }\n}\n\nexport function useLeaderboard(pageSize: number = 50) {\n  const [users, setUsers] = useState<LeaderboardUser[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [hasMore, setHasMore] = useState(true)\n  const [page, setPage] = useState(0)\n\n  const loadMore = async () => {\n    try {\n      setLoading(true)\n      const skip = page * pageSize\n      const newUsers = await fetchLeaderboard(pageSize, skip)\n      \n      if (page === 0) {\n        setUsers(newUsers)\n      } else {\n        setUsers(prev => [...prev, ...newUsers])\n      }\n      \n      setHasMore(newUsers.length === pageSize)\n      setPage(prev => prev + 1)\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const refresh = () => {\n    setPage(0)\n    setUsers([])\n    setHasMore(true)\n    setError(null)\n    loadMore()\n  }\n\n  useEffect(() => {\n    loadMore()\n  }, [])\n\n  return {\n    users,\n    loading,\n    error,\n    hasMore,\n    loadMore,\n    refresh,\n  }\n}\n\nexport function useUserProfile(userAddress?: string) {\n  const { account } = useWeb3React()\n  const [user, setUser] = useState<UserDetails | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  const targetAddress = userAddress || account\n\n  useEffect(() => {\n    async function loadUser() {\n      if (!targetAddress) {\n        setLoading(false)\n        return\n      }\n\n      try {\n        setLoading(true)\n        setError(null)\n        const userDetails = await fetchUserDetails(targetAddress)\n        setUser(userDetails)\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Unknown error')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    loadUser()\n  }, [targetAddress])\n\n  return {\n    user,\n    loading,\n    error,\n    isOwnProfile: targetAddress === account,\n  }\n}\n\nexport function useDailyLeaderboard(date?: Date) {\n  const [leaders, setLeaders] = useState<UserDayData[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    async function loadDailyLeaders() {\n      try {\n        setLoading(true)\n        setError(null)\n        const dailyLeaders = await fetchDailyLeaders(date)\n        setLeaders(dailyLeaders)\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Unknown error')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    loadDailyLeaders()\n  }, [date])\n\n  return {\n    leaders,\n    loading,\n    error,\n  }\n}\n","import { Trans } from \"@lingui/macro\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { ButtonPrimary } from \"components/Button\";\nimport { useLeaderboard, useUserHistoricalData } from \"hooks/useLeaderboard\";\nimport React, { useState, useEffect, useMemo, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled, { useTheme, keyframes } from \"styled-components\";\nimport { ThemedText } from \"theme/components\";\nimport { PageWrapper as SwapPageWrapper } from \"components/swap/styled\";\nimport { TrendingUp, Info, BarChart, Users } from \"react-feather\";\nimport * as d3 from \"d3\";\nimport StatusIcon from \"components/Identicon/StatusIcon\";\nimport { getConnection } from \"connection\";\nimport { Connection } from \"connection/types\";\nimport { LineChart, Line, ResponsiveContainer } from 'recharts';\nimport { MouseoverTooltip } from \"components/Tooltip\";\n\n// Animations\nconst fadeIn = keyframes`\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n`;\n\n// Main Layout con tema app moderno\nconst PageWrapper = styled(SwapPageWrapper)`\n  max-width: 1400px;\n  min-height: 100vh;\n  padding: 68px 24px 24px;\n  background: ${({ theme }) => theme.background};\n\n  @media (max-width: 768px) {\n    padding: 68px 16px 16px;\n  }\n`;\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: 300px 1fr;\n  gap: 24px;\n  width: 100%;\n\n  @media (max-width: 1200px) {\n    grid-template-columns: 1fr;\n    gap: 20px;\n  }\n`;\n\n// Left Sidebar con tema moderno\nconst Sidebar = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  border-radius: 24px;\n  background: ${({ theme }) => theme.surface1};\n  z-index: 1;\n  max-height: calc(100vh - 120px);\n  overflow: hidden;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: -30px;\n    left: -30px;\n    width: 150px;\n    height: 150px;\n    background: radial-gradient(\n      circle at top left,\n      rgba(168, 85, 247, 0.4) 0%,\n      rgba(124, 58, 237, 0.3) 40%,\n      rgba(168, 85, 247, 0.05) 80%,\n      transparent 100%\n    );\n    filter: blur(35px);\n    z-index: 0;\n    pointer-events: none;\n    border-radius: 50%;\n  }\n\n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    border-radius: 24px;\n    background: conic-gradient(\n      from 180deg at 50% 50%,\n      transparent 0deg,\n      transparent 60deg,\n      #a855f7 90deg,\n      #7c3aed 180deg,\n      #a855f7 230deg,\n      transparent 300deg,\n      transparent 360deg\n    );\n    mask: \n      linear-gradient(#fff 0 0) content-box, \n      linear-gradient(#fff 0 0) border-box;\n    -webkit-mask: \n      linear-gradient(#fff 0 0) content-box, \n      linear-gradient(#fff 0 0) border-box;\n    -webkit-mask-composite: xor;\n    mask-composite: exclude;\n    padding: 2px;\n    z-index: 2;\n    pointer-events: none;\n  }\n`;\n\nconst SidebarContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 16px;\n  overflow-y: auto;\n  flex: 1;\n  position: relative;\n  z-index: 1;\n  \n  /* Hide scrollbar but keep functionality */\n  scrollbar-width: none; /* Firefox */\n  -ms-overflow-style: none; /* IE and Edge */\n  \n  &::-webkit-scrollbar {\n    display: none; /* Chrome, Safari, Opera */\n  }\n`;\n\nconst SectionHeader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 20px;\n  flex-shrink: 0;\n`;\n\nconst SectionTitle = styled(ThemedText.SubHeader)`\n  margin: 0;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  color: ${({ theme }) => theme.neutral1};\n  font-weight: 600;\n`;\n\nconst UserList = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-bottom: 32px;\n`;\n\nconst UserItem = styled(Link)`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 16px;\n  background: ${({ theme }) => theme.surface2};\n  border-radius: 16px;\n  border: 1px solid ${({ theme }) => theme.surface3};\n  transition: all 0.2s ease;\n  cursor: pointer;\n  text-decoration: none;\n  color: inherit;\n\n  &:hover {\n    background: ${({ theme }) => theme.surface3};\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n    text-decoration: none;\n    color: inherit;\n  }\n`;\n\nconst RankPosition = styled.div<{ $rank: number }>`\n  width: 32px;\n  height: 32px;\n  border-radius: 10px;\n  box-shadow: ${({ $rank, theme }) =>\n  $rank === 1\n    ? `0 0 8px ${theme.accent1}`\n    : $rank === 2\n    ? `0 0 6px #C0C0C0`\n    : $rank === 3\n    ? `0 0 6px #CD7F32`\n    : 'none'};\n  background: ${({ theme, $rank }) => {\n    if ($rank === 1)\n      return `linear-gradient(135deg, ${theme.accent1}, ${theme.accent2})`;\n    if ($rank === 2) return `linear-gradient(135deg, #C0C0C0, #E8E8E8)`;\n    if ($rank === 3) return `linear-gradient(135deg, #CD7F32, #FFB347)`;\n    return theme.surface3;\n  }};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 14px;\n  font-weight: 700;\n  color: ${({ theme, $rank }) =>\n    $rank <= 3 ? theme.surface1 : theme.neutral1};\n  flex-shrink: 0;\n\n  &::before {\n    content: \"${({ $rank }) => {\n      if ($rank === 1) return \"👑\";\n      if ($rank === 2) return \"🥈\";\n      if ($rank === 3) return \"🥉\";\n      return $rank.toString();\n    }}\";\n  }\n`;\n\nconst UserMainInfo = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  flex: 1;\n  min-width: 0;\n`;\n\nconst PerformanceStats = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  gap: 4px;\n  flex-shrink: 0;\n  min-width: 80px;\n`;\n\nconst SidebarVolumeAmount = styled(ThemedText.BodySmall)`\n  font-weight: 700;\n  color: #fff;\ntext-shadow: 0 0 6px ${({ theme }) => theme.accent1};\n  font-size: 14px;\n`;\n\nconst PerformanceChange = styled.div<{ $positive: boolean }>`\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  font-size: 12px;\n  font-weight: 600;\n  color: ${({ $positive, theme }) =>\n    $positive ? theme.success : theme.critical};\n\n  &::before {\n    content: \"${({ $positive }) => ($positive ? \"📈\" : \"📉\")}\";\n    font-size: 10px;\n  }\n`;\n\nconst WalletIcon = styled.div`\n  width: 40px;\n  height: 40px;\n  border-radius: 12px;\n  background: ${({ theme }) => theme.surface2};\n  border: 2px solid ${({ theme }) => theme.surface3};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  \n  /* Override StatusIcon margin */\n  & > div {\n    margin-right: 0 !important;\n  }\n`\n\nconst UserDetails = styled.div`\n  flex: 1;\n  min-width: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n`;\n\nconst WalletAddress = styled(ThemedText.BodySmall)`\n  font-family: \"Monaco\", \"Menlo\", \"Ubuntu Mono\", monospace;\n  font-weight: 600;\n  color: ${({ theme }) => theme.neutral1};\n  font-size: 13px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst VolumeText = styled(ThemedText.LabelMicro)`\n  color: ${({ theme }) => theme.neutral2};\n  font-size: 12px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\n\n// Main Content Area con tema moderno\nconst MainContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n\n  @media (max-width: 1200px) {\n    order: 1;\n  }\n`;\n\nconst Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 24px;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 16px;\n  }\n`;\n\nconst HeaderLeft = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 20px;\n`;\n\nconst ContestTitle = styled(ThemedText.HeadlineMedium)`\n  color: ${({ theme }) => theme.neutral1};\n  font-weight: 700;\n  margin: 0;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  \n  @media (max-width: 768px) {\n    font-size: 24px;\n  }\n`;\n\nconst ContestDescription = styled(ThemedText.BodyPrimary)`\n  color: ${({ theme }) => theme.neutral2};\n  margin: 8px 0 0 0;\n  font-size: 16px;\n  line-height: 1.5;\n  \n  @media (max-width: 768px) {\n    font-size: 14px;\n  }\n`;\n\nconst HeaderContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n\n\n// Tree Map Container più compatto\nconst TreeMapContainer = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 16px;\n  border-radius: 24px;\n  background: ${({ theme }) => theme.surface1};\n  z-index: 1;\n\n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    border-radius: 24px;\n    background: conic-gradient(\n      from 180deg at 50% 50%,\n      transparent 0deg,\n      transparent 45deg,\n      #a855f7 80deg,\n      #7c3aed 120deg,\n      #a855f7 180deg,\n      transparent 315deg,\n      transparent 360deg\n    );\n    mask: \n      linear-gradient(#fff 0 0) content-box, \n      linear-gradient(#fff 0 0) border-box;\n    -webkit-mask: \n      linear-gradient(#fff 0 0) content-box, \n      linear-gradient(#fff 0 0) border-box;\n    -webkit-mask-composite: xor;\n    mask-composite: exclude;\n    padding: 2px;\n    z-index: -1;\n    pointer-events: none;\n  }\n`;\n\nconst TreeMapWrapper = styled.div<{ $dynamicHeight: number }>`\n  width: 100%;\n  height: ${({ $dynamicHeight }) => $dynamicHeight}px;\n  min-height: 500px;\n  max-height: 1200px;\n  position: relative;\n  overflow: hidden;\n  border-radius: 20px;\n  background: ${({ theme }) => theme.surface2};\n  border: 1px solid ${({ theme }) => theme.surface3};\n\n  @media (max-width: 768px) {\n    height: ${({ $dynamicHeight }) => Math.min($dynamicHeight * 0.9, 800)}px;\n    min-height: 400px;\n    max-height: 800px;\n  }\n`;\n\n// Calculate dynamic height based on number of wallets and optimal treemap layout\nconst calculateTreemapHeight = (walletCount: number): number => {\n  if (walletCount === 0) return 500;\n  \n  // Base calculation: more wallets need more height\n  // Using a more aggressive scaling for better visibility\n  const baseHeight = 500 + Math.log(walletCount) * 120;\n  \n  // Additional height for better visibility with many wallets\n  const additionalHeight = Math.min(walletCount * 8, 400);\n  \n  const calculatedHeight = baseHeight + additionalHeight;\n  \n  // Clamp between min and max values with higher limits\n  return Math.max(500, Math.min(calculatedHeight, 1200));\n};\n\n// Treemap D3 Component\nconst TreemapNode = styled.div<{ \n  $x: number\n  $y: number\n  $width: number\n  $height: number\n  $rank: number\n  $volume: number\n}>`\n  position: absolute;\n  left: ${({ $x }) => $x}px;\n  top: ${({ $y }) => $y}px;\n  width: ${({ $width }) => $width}px;\n  height: ${({ $height }) => $height}px;\n  background: ${({ $rank, theme }) => {\n  if ($rank === 1) {\n    return `linear-gradient(135deg, #5821B7, #000)`; // viola acceso\n  }\n  if ($rank === 2) {\n    return `linear-gradient(135deg, #D1D5DB, #000)`; // argento\n  }\n  if ($rank === 3) {\n    return `linear-gradient(135deg, #F97316, #000)`; // bronzo-arancio\n  }\n  return 'linear-gradient(135deg, #1F2937, #000)'; // grigio scuro per altri\n}};\nbox-shadow: ${({ $rank }) => {\n  if ($rank === 1) return `0 0 12px #8B5CF6aa`;\n  if ($rank === 2) return `0 0 10px #D1D5DBcc`;\n  if ($rank === 3) return `0 0 10px #F97316cc`;\n  return `inset 0 0 6px rgba(255,255,255,0.05)`; // glow soft per altri\n}};\n  border-radius: 16px;\n  padding: 16px;\n  cursor: pointer;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: hidden;\n  animation: ${fadeIn} 0.6s ease-out;\n  animation-delay: ${({ $rank }) => $rank * 0.1}s;\n  animation-fill-mode: both;\n  opacity: 0;\n  backdrop-filter: blur(10px);\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n  \n  \n  &:hover {\n    transform: translateY(-4px) scale(1.02);\n    z-index: 10;\n    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);\n    background: ${({ $rank, theme }) => {\n      if ($rank === 1) {\n        return `linear-gradient(135deg, #5821B7, #000)`;\n      }\n      if ($rank === 2) {\n        return `linear-gradient(135deg, #D1D5DB, #000)`;\n      }\n      if ($rank === 3) {\n        return `linear-gradient(135deg, #F97316, #000)`;\n      }\n      return 'linear-gradient(135deg, #1F2937, #000)';\n    }};\n  }\n  \n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(135deg, \n      ${({ theme }) => theme.accent1}08, \n      ${({ theme }) => theme.accent1}02\n    );\n    opacity: 0;\n    transition: opacity 0.3s ease;\n    border-radius: 16px;\n  }\n  \n  &:hover::before {\n    opacity: 1;\n  }\n`\n\nconst NodeHeader = styled.div`\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`;\n\nconst WalletInfo = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  min-width: 0;\n  flex: 1;\n`;\n\nconst WalletAvatar = styled.div<{ $rank: number }>`\n  width: ${({ $rank }) => $rank <= 3 ? '36px' : '28px'};\n  height: ${({ $rank }) => $rank <= 3 ? '36px' : '28px'};\n  border-radius: 10px;\n  background: ${({ theme }) => theme.surface2};\n  border: 2px solid ${({ theme }) => theme.surface3};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n  overflow: hidden;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  \n  /* Override StatusIcon margin */\n  & > div {\n    margin-right: 0 !important;\n  }\n`\n\nconst WalletDetails = styled.div`\n  min-width: 0;\n  flex: 1;\n`;\n\nconst WalletAddressStyled = styled(ThemedText.BodySmall)`\n  font-family: \"Monaco\", \"Menlo\", \"Ubuntu Mono\", monospace;\n  font-weight: 600;\n  color: ${({ theme }) => theme.neutral1};\n  font-size: 11px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin-bottom: 2px;\n`;\n\nconst RankBadge = styled.div<{ $rank: number }>`\n  background: ${({ theme, $rank }) => {\n    if ($rank === 1) return `linear-gradient(135deg, ${theme.accent1}, ${theme.accent2})`\n    if ($rank === 2) return `linear-gradient(135deg, #C0C0C0, #E8E8E8)`\n    if ($rank === 3) return `linear-gradient(135deg, #CD7F32, #FFB347)`\n    return theme.surface3\n  }};\n  color: ${({ theme, $rank }) => \n    $rank <= 3 ? theme.surface1 : theme.neutral1\n  };\n  padding: 4px 8px;\n  text-shadow: ${({ $rank, theme }) =>\n  $rank <= 3 ? `0 0 6px ${theme.accent1}` : 'none'};\n  border-radius: 6px;\n  font-size: 10px;\n  font-weight: 700;\n  text-align: center;\n  min-width: 24px;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\n  flex-shrink: 0;\n`\n\nconst VolumeDisplay = styled.div`\n  margin-top: auto;\n`;\n\nconst VolumeAmount = styled(ThemedText.SubHeader)`\n color: #fff;\ntext-shadow: 0 0 6px ${({ theme }) => theme.accent1};\n  font-size: 12px;\n  font-weight: 700;\n  margin-bottom: 2px;\n  line-height: 1.2;\n`;\n\n\n// Mini chart component for larger nodes\nconst MiniChart = styled.div<{ $visible: boolean }>`\n  position: absolute;\n  bottom: 8px;\n  right: 8px;\n  width: 40%;\n  height: 25%;\n  opacity: ${({ $visible }) => ($visible ? 0.6 : 0)};\n  transition: opacity 0.3s ease;\n  pointer-events: none;\n`;\n\n// Treemap component using D3\ninterface TreemapComponentProps {\n  users: any[];\n  totalVolume: number;\n  width: number;\n  height: number;\n  connection: Connection;\n}\n\nconst TreemapComponent = ({\n  users,\n  totalVolume,\n  width,\n  height,\n  connection,\n}: TreemapComponentProps) => {\n  const theme = useTheme();\n\n  const treemapData = useMemo(() => {\n    if (!users || users.length === 0) return [];\n\n    const data = users.map((user, index) => {\n      const volume = parseFloat(user.totalVolumeUSD || \"0\");\n\n      return {\n        id: user.id,\n        originalValue: volume,\n        rank: index + 1,\n        percentage:\n          totalVolume > 0 ? ((volume / totalVolume) * 100).toFixed(2) : \"0.00\",\n      };\n    });\n\n    // Normalizzazione per evitare che il primo valore domini troppo\n    const values = data.map((d) => d.originalValue).filter((v) => v > 0);\n    if (values.length === 0) return [];\n\n    const maxValue = Math.max(...values);\n    const minValue = Math.min(...values);\n    const range = maxValue - minValue;\n\n    // Applica una scala logaritmica bilanciata per tutti i nodi con dimensioni minime garantite\n    const normalizedData = data.map((d) => {\n      let normalizedValue;\n\n      if (d.originalValue <= 0) {\n        normalizedValue = 100; // Valore base più alto per volumi zero\n      } else if (d.rank === 1) {\n        // Il primo nodo deve essere più grande ma non dominante\n        normalizedValue = Math.log(d.originalValue + 1) * 90 + 400;\n      } else if (d.rank <= 3) {\n        // Top 3 con buona visibilità\n        normalizedValue = Math.log(d.originalValue + 1) * 80 + 250;\n      } else if (d.rank <= 10) {\n        // Top 10 con dimensioni decenti\n        normalizedValue = Math.log(d.originalValue + 1) * 70 + 180;\n      } else {\n        // Altri nodi con dimensione minima garantita per leggibilità\n        normalizedValue = Math.log(d.originalValue + 1) * 60 + 120;\n      }\n\n      return {\n        ...d,\n        value: normalizedValue,\n      };\n    });\n\n    // Use D3 treemap layout con valori normalizzati\n    const root = d3\n      .hierarchy({ children: normalizedData })\n      .sum((d) => (d as any).value)\n      .sort((a, b) => ((a as any).rank || 0) - ((b as any).rank || 0)); // Ordina per rank, non per valore\n\n    const treemap = d3\n      .treemap<any>()\n      .size([width, height])\n      .padding(6)\n      .paddingInner(8)\n      .paddingOuter(16)\n      .round(true);\n\n    treemap(root);\n\n    return (root.leaves() as any[]).map((d: any) => ({\n      ...d.data,\n      x: d.x0,\n      y: d.y0,\n      width: Math.max(d.x1 - d.x0, 120), // Dimensione minima aumentata per leggibilità\n      height: Math.max(d.y1 - d.y0, 80), // Altezza minima aumentata per testi\n    }));\n  }, [users, totalVolume, width, height]);\n\n  const formatUserAddress = (address: string) => {\n    if (!address) return \"0x...\";\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n  };\n\n  const formatVolume = (volume: number) => {\n    if (volume >= 1000000) return (volume / 1000000).toFixed(2) + \"M\";\n    if (volume >= 1000) return (volume / 1000).toFixed(2) + \"K\";\n    return volume.toFixed(2);\n  };\n\n  return (\n    <div style={{ position: \"relative\", width: \"100%\", height: \"100%\" }}>\n      {treemapData.map((node: any) => (\n        <TreemapNode\n          key={node.id}\n          $x={node.x}\n          $y={node.y}\n          $width={node.width}\n          $height={node.height}\n          $rank={node.rank}\n          $volume={node.originalValue}\n          as={Link}\n          to={`/leaderboard/profile/${node.id}`}\n        >\n         <NodeHeader>\n  <WalletInfo>\n    <WalletAvatar $rank={node.rank}>\n      <StatusIcon account={node.id} connection={connection} size={node.rank <= 3 ? 36 : 28} showMiniIcons={false} />\n    </WalletAvatar>\n    {node.width > 120 && (\n      <WalletDetails>\n        <WalletAddressStyled>\n          {formatUserAddress(node.id)}\n        </WalletAddressStyled>\n      </WalletDetails>\n    )}\n  </WalletInfo>\n  <RankBadge $rank={node.rank}>\n    #{node.rank}\n  </RankBadge>\n</NodeHeader>\n\n          {node.height > 60 && (\n            <VolumeDisplay>\n              <VolumeAmount>${formatVolume(node.originalValue)}</VolumeAmount>\n            </VolumeDisplay>\n          )}\n\n          <MiniChart $visible={node.width > 140 && node.height > 100}>\n            <UserChart userId={node.id} color={theme.accent1} />\n          </MiniChart>\n        </TreemapNode>\n      ))}\n    </div>\n  );\n};\n\n// Chart component for user transactions using real data\n\nconst UserChart = ({\n  userId,\n  color = \"rgba(255,255,255,0.8)\",\n}: {\n  userId: string;\n  color?: string;\n}) => {\n  const { data: historicalData } = useUserHistoricalData(userId, 7);\n\n  const chartData = useMemo(() => {\n    // Calcola gli ultimi 7 giorni precisi usando timestamp\n    const now = new Date();\n    const last7Days = [];\n    \n    for (let i = 6; i >= 0; i--) {\n      const date = new Date(now);\n      date.setDate(date.getDate() - i);\n      date.setUTCHours(0, 0, 0, 0);\n      last7Days.push(Math.floor(date.getTime() / 1000));\n    }\n\n    if (!historicalData || historicalData.length === 0) {\n      // Fallback: crea pattern di crescita per 7 giorni anche senza dati reali\n      return last7Days.map((timestamp, index) => ({\n        index,\n        value: 20 + (index * 10), // Pattern crescente base\n        timestamp,\n        volume: 0,\n      }));\n    }\n\n    // Crea mappa dei dati esistenti per timestamp\n    const dataMap = new Map();\n    historicalData.forEach((d) => {\n      const dayTimestamp = d.date || 0;\n      dataMap.set(dayTimestamp, parseFloat(d.dailyVolumeUSD || \"0\"));\n    });\n\n    // Calcola volume cumulativo per esattamente gli ultimi 7 giorni\n    let cumulativeVolume = 0;\n    const last7DaysData = last7Days.map((timestamp) => {\n      const dailyVolume = dataMap.get(timestamp) || 0; // 0 se nessun movimento\n      cumulativeVolume += dailyVolume;\n      return {\n        timestamp,\n        dailyVolume,\n        cumulativeVolume,\n      };\n    });\n\n    // Normalizza per il chart (crescita cumulativa)\n    const maxCumulativeVolume = Math.max(...last7DaysData.map(d => d.cumulativeVolume), 1);\n    \n    const points = last7DaysData.map((day, index) => {\n      // Se non c'è volume, la linea rimane piatta rispetto al punto precedente\n      // Se c'è volume, cresce proporzionalmente\n      const normalizedY = maxCumulativeVolume > 0\n        ? 20 + ((day.cumulativeVolume / maxCumulativeVolume) * 60)\n        : 20 + (index * 2); // Crescita minima anche senza dati\n        \n      return {\n        index,\n        value: Math.max(20, Math.min(80, normalizedY)),\n        timestamp: day.timestamp,\n        volume: day.cumulativeVolume,\n        dailyVolume: day.dailyVolume,\n      };\n    });\n\n    return points;\n  }, [historicalData]);\n\n  // Convert color to hex if it's rgba for better Recharts compatibility\n  const getHexColor = (colorString: string) => {\n    if (colorString.startsWith('rgba(255,255,255')) {\n      return '#ffffff';\n    }\n    if (colorString.startsWith('rgba(')) {\n      // Extract RGB values and convert to hex\n      const match = colorString.match(/rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)/);\n      if (match) {\n        const r = parseInt(match[1]).toString(16).padStart(2, '0');\n        const g = parseInt(match[2]).toString(16).padStart(2, '0');\n        const b = parseInt(match[3]).toString(16).padStart(2, '0');\n        return `#${r}${g}${b}`;\n      }\n    }\n    return colorString;\n  };\n\n  const hexColor = getHexColor(color);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <LineChart\n          data={chartData}\n          margin={{ top: 5, right: 5, left: 5, bottom: 5 }}\n        >\n          <defs>\n            <linearGradient id={`lineGradient-${userId}`} x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\n              <stop offset=\"0%\" stopColor={hexColor} stopOpacity={0.8} />\n              <stop offset=\"50%\" stopColor={hexColor} stopOpacity={1} />\n              <stop offset=\"100%\" stopColor={hexColor} stopOpacity={0.6} />\n            </linearGradient>\n            \n            <filter id={`glow-${userId}`}>\n              <feGaussianBlur stdDeviation=\"2\" result=\"coloredBlur\"/>\n              <feMerge> \n                <feMergeNode in=\"coloredBlur\"/>\n                <feMergeNode in=\"SourceGraphic\"/>\n              </feMerge>\n            </filter>\n          </defs>\n          \n          <Line\n            type=\"monotone\"\n            dataKey=\"value\"\n            stroke={`url(#lineGradient-${userId})`}\n            strokeWidth={2.5}\n            dot={false}\n            activeDot={{\n              r: 4,\n              fill: hexColor,\n              stroke: hexColor,\n              strokeWidth: 2,\n              filter: `url(#glow-${userId})`,\n            }}\n            filter={`url(#glow-${userId})`}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\n// Component per calcolare performance reali di un utente\nconst UserPerformanceData = ({\n  userId,\n  currentVolume,\n  children,\n}: {\n  userId: string;\n  currentVolume?: number;\n  children: (data: { change24h: number; change7d: number }) => React.ReactNode;\n}) => {\n  const { data: historicalData } = useUserHistoricalData(userId, 7);\n\n  const performanceData = useMemo(() => {\n    console.log(\n      \"UserPerformanceData - userId:\",\n      userId,\n      \"historicalData:\",\n      historicalData,\n      \"currentVolume:\",\n      currentVolume\n    );\n\n    // Se non abbiamo dati storici sufficienti\n    if (!historicalData || historicalData.length === 0) {\n      console.log(\"No historical data available\");\n      if (currentVolume && currentVolume > 0) {\n        // Se c'è volume attuale ma nessun dato storico, significa che è il primo giorno\n        // Non possiamo calcolare una crescita percentuale senza punto di confronto\n        // Ma se è il primo giorno di attività, potremmo considerarlo come 100% o N/A\n        return { change24h: 0, change7d: 0 }; // o return { change24h: null, change7d: null }\n      }\n      return { change24h: 0, change7d: 0 };\n    }\n\n    // Converti i dati e ordina per data (più vecchio prima per calcolare cumulative)\n    const sortedDataByDate = [...historicalData]\n      .map((d) => ({\n        ...d,\n        dailyVolume: parseFloat(d.dailyVolumeUSD || \"0\"),\n        timestamp: d.date || 0,\n      }))\n      .sort((a, b) => a.timestamp - b.timestamp); // Ordina dal più vecchio al più recente\n\n    // Calcola il volume cumulativo per ogni giorno\n    let cumulativeVolume = 0;\n    const dataWithCumulative = sortedDataByDate.map((d) => {\n      cumulativeVolume += d.dailyVolume;\n      return {\n        ...d,\n        totalVolume: cumulativeVolume,\n      };\n    });\n\n    // Ora ordina per data (più recente prima) per i calcoli\n    const sortedData = dataWithCumulative.sort(\n      (a, b) => b.timestamp - a.timestamp\n    );\n\n    console.log(\n      \"Sorted data:\",\n      sortedData.slice(0, 7).map((d) => ({\n        date: d.timestamp,\n        formattedDate: new Date(d.timestamp * 1000).toISOString(),\n        totalVolume: d.totalVolume,\n        dailyVolume: d.dailyVolume,\n      }))\n    );\n\n    // Per il calcolo delle percentuali, usa il volume totale\n    // Se currentVolume è fornito, usalo, altrimenti usa l'ultimo calcolato\n    const currentTotalVolume = currentVolume ?? sortedData[0]?.totalVolume ?? 0;\n\n    let change24h = 0;\n    let change7d = 0;\n\n    // Calcolo 24h - confronta volume totale attuale con quello di ieri\n    if (sortedData.length >= 2) {\n      const yesterdayTotalVolume = sortedData[1].totalVolume;\n\n      if (yesterdayTotalVolume === 0 && currentTotalVolume > 0) {\n        // Da zero a qualcosa = crescita infinita, ma mostriamo 100%\n        change24h = 100;\n      } else if (yesterdayTotalVolume > 0) {\n        // Calcolo percentuale normale: (nuovo - vecchio) / vecchio * 100\n        change24h =\n          ((currentTotalVolume - yesterdayTotalVolume) / yesterdayTotalVolume) *\n          100;\n      } else {\n        // Entrambi zero = nessun cambiamento\n        change24h = 0;\n      }\n    } else if (sortedData.length === 1 && currentTotalVolume > 0) {\n      // Se abbiamo solo un dato e c'è volume, significa crescita da 0\n      change24h = 100;\n    }\n\n    // Calcolo 7d - confronta volume totale attuale con quello di una settimana fa\n    if (sortedData.length >= 7) {\n      const weekAgoTotalVolume = sortedData[6].totalVolume;\n\n      if (weekAgoTotalVolume === 0 && currentTotalVolume > 0) {\n        // Da zero a qualcosa = crescita infinita, ma mostriamo 100%\n        change7d = 100;\n      } else if (weekAgoTotalVolume > 0) {\n        // Calcolo percentuale normale\n        change7d =\n          ((currentTotalVolume - weekAgoTotalVolume) / weekAgoTotalVolume) *\n          100;\n      } else {\n        // Entrambi zero = nessun cambiamento\n        change7d = 0;\n      }\n    } else if (sortedData.length >= 2) {\n      // Se non abbiamo 7 giorni di dati, estrapola dal trend disponibile\n      const dailyGrowthRate = change24h / 100; // converti in decimale\n\n      // Estrapola per 7 giorni (formula composta)\n      if (dailyGrowthRate !== 0) {\n        change7d = (Math.pow(1 + dailyGrowthRate, 7) - 1) * 100;\n      }\n    } else if (sortedData.length === 1 && currentTotalVolume > 0) {\n      // Se abbiamo solo un dato e c'è volume, significa crescita da 0\n      change7d = 100;\n    }\n\n    // Limita i valori a un range ragionevole\n    change24h = Math.max(-99, Math.min(change24h, 1000)); // Non può scendere sotto -99%\n    change7d = Math.max(-99, Math.min(change7d, 2000)); // Non può scendere sotto -99%\n\n    const result = {\n      change24h: Math.round(change24h * 100) / 100,\n      change7d: Math.round(change7d * 100) / 100,\n    };\n\n    console.log(\"Performance result:\", {\n      ...result,\n      dataPoints: sortedData.length,\n      currentTotal: currentTotalVolume,\n      yesterdayTotal: sortedData[1]?.totalVolume,\n      weekAgoTotal: sortedData[6]?.totalVolume,\n      currentVolumeParam: currentVolume,\n    });\n\n    return result;\n  }, [historicalData, userId, currentVolume]);\n\n  return children(performanceData);\n};\n\n// Utility functions\nconst formatUserAddress = (address: string) => {\n  if (!address) return \"0x...\";\n  return `${address.slice(0, 6)}...${address.slice(-4)}`;\n};\n\nconst formatVolume = (volume: number) => {\n  if (volume >= 1000000) return (volume / 1000000).toFixed(2) + \"M\";\n  if (volume >= 1000) return (volume / 1000).toFixed(2) + \"K\";\n  return volume.toFixed(2);\n};\n\nconst calculatePercentage = (userVolume: string, totalVolume: number) => {\n  const volume = parseFloat(userVolume) || 0;\n  if (totalVolume === 0) return \"0.00%\";\n  return ((volume / totalVolume) * 100).toFixed(2) + \"%\";\n};\n\nexport default function Leaderboard() {\n  const { account, connector } = useWeb3React();\n  const theme = useTheme();\n  const [selectedCategory, setSelectedCategory] = useState(\"Top20\");\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [containerDimensions, setContainerDimensions] = useState({\n    width: 800,\n    height: 720,\n  });\n\n  // Get current connection for StatusIcon\n  const connection = getConnection(connector);\n\n  const {\n    users: allTimeUsers,\n    loading: allTimeLoading,\n    error: allTimeError,\n  } = useLeaderboard(50);\n\n  // Update container dimensions when ref changes\n  useEffect(() => {\n    const updateDimensions = () => {\n      if (containerRef.current) {\n        const { clientWidth, clientHeight } = containerRef.current;\n        setContainerDimensions({\n          width: clientWidth || 600,\n          height: Math.max(clientHeight - 48, 500), // Dimensioni più compatte\n        });\n      }\n    };\n\n    updateDimensions();\n\n    const handleResize = () => updateDimensions();\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  const currentUsers = allTimeUsers;\n  const isLoading = allTimeLoading;\n  const error = allTimeError;\n\n  // Take top 30 users for the tree map (increased from 20)\n  const topUsers = useMemo(() => {\n    if (!currentUsers || currentUsers.length === 0) return [];\n    return currentUsers.slice(0, 30);\n  }, [currentUsers]);\n\n  // Calculate total volume for percentage calculations\n  const totalVolume = useMemo(() => {\n    if (!topUsers || topUsers.length === 0) return 0;\n    return topUsers.reduce((sum: number, user: any) => {\n      const volume = parseFloat((user as any).totalVolumeUSD || \"0\");\n      return sum + volume;\n    }, 0);\n  }, [topUsers]);\n\n  // Process users for sidebar (complete leaderboard)\n  const sidebarUsers = useMemo(() => {\n    if (!topUsers || topUsers.length === 0) return [];\n\n    return topUsers.slice(0, 10).map((user, index) => {\n      const volume = parseFloat((user as any).totalVolumeUSD || \"0\");\n\n      return {\n        address: user.id,\n        rank: index + 1,\n        volume: formatVolume(volume),\n        rawVolume: volume,\n        percentage: calculatePercentage(\n          (user as any).totalVolumeUSD,\n          totalVolume\n        ),\n        // Add current volume for fallback performance calculation\n        currentVolume: volume,\n      };\n    });\n  }, [topUsers, totalVolume]);\n\n  // Calculate dynamic height for treemap\n  const dynamicHeight = useMemo(() => {\n    return calculateTreemapHeight(topUsers.length);\n  }, [topUsers.length]);\n\n  return (\n    <PageWrapper>\n      <Container>        {/* Left Sidebar */}\n        <Sidebar>\n          <SidebarContent>\n            <SectionHeader>\n              <SectionTitle>\n                <BarChart size={18} />\n                Leaderboard\n              </SectionTitle>\n              <MouseoverTooltip\n                text={\n                  <div>\n                    Ranking of users who generated the most volume.<br />\n                    Higher rankings increase your chances for airdrops!\n                  </div>\n                }\n                placement=\"right\"\n              >\n                <Info size={16} color=\"#888\" style={{ cursor: 'help' }} />\n              </MouseoverTooltip>\n            </SectionHeader>\n\n            <UserList>\n              {sidebarUsers.map((trader) => (\n                <UserPerformanceData\n                  key={trader.address}\n                  userId={trader.address}\n                  currentVolume={trader.rawVolume}\n                >\n                  {(performanceData) => (\n                    <UserItem to={`/leaderboard/profile/${trader.address}`}>\n                     <UserMainInfo>\n        <RankPosition $rank={trader.rank} />\n        <WalletIcon>\n          <StatusIcon account={trader.address} connection={connection} size={40} showMiniIcons={false} />\n        </WalletIcon>\n        <UserDetails>\n          <WalletAddress>{formatUserAddress(trader.address)}</WalletAddress>\n          <VolumeText>${trader.volume}</VolumeText>\n        </UserDetails>\n      </UserMainInfo>\n                      <PerformanceStats>\n                        <SidebarVolumeAmount>\n                          ${trader.volume}\n                        </SidebarVolumeAmount>\n                        <PerformanceChange\n                          $positive={performanceData.change24h > 0}\n                        >\n                          {performanceData.change24h > 0 ? \"+\" : \"\"}\n                          {performanceData.change24h.toFixed(1)}%\n                        </PerformanceChange>\n                      </PerformanceStats>\n                    </UserItem>\n                  )}\n                </UserPerformanceData>\n              ))}\n            </UserList>\n          </SidebarContent>\n        </Sidebar>\n\n        {/* Main Content */}\n        <MainContent>\n          <Header>\n            <HeaderLeft>\n              <HeaderContent>\n                <ContestTitle>\n                  <TrendingUp size={24} />\n                  Volume Contest\n                </ContestTitle>\n                <ContestDescription>\n                  Compete with other traders to climb the leaderboard. Higher rankings increase your chances for future airdrops and exclusive rewards!\n                </ContestDescription>\n              </HeaderContent>\n            </HeaderLeft>\n          </Header>\n\n          <TreeMapContainer ref={containerRef}>\n            {isLoading ? (\n              <div\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  height: \"400px\",\n                  color: \"#9ca3af\",\n                  fontSize: \"18px\",\n                  fontWeight: \"500\",\n                }}\n              >\n                <div\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    gap: \"12px\",\n                    padding: \"24px 32px\",\n                    background: \"rgba(255, 255, 255, 0.05)\",\n                    borderRadius: \"16px\",\n                    backdropFilter: \"blur(10px)\",\n                  }}\n                >\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"20px\",\n                      border: \"2px solid rgba(255, 255, 255, 0.3)\",\n                      borderTop: \"2px solid currentColor\",\n                      borderRadius: \"50%\",\n                      animation: \"spin 1s linear infinite\",\n                    }}\n                  />\n                  Loading leaderboard...\n                </div>\n              </div>\n            ) : error ? (\n              <div\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  height: \"400px\",\n                  color: \"#ef4444\",\n                  fontSize: \"18px\",\n                  fontWeight: \"500\",\n                }}\n              >\n                <div\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    gap: \"12px\",\n                    padding: \"24px 32px\",\n                    background: \"rgba(239, 68, 68, 0.1)\",\n                    borderRadius: \"16px\",\n                    backdropFilter: \"blur(10px)\",\n                    border: \"1px solid rgba(239, 68, 68, 0.2)\",\n                  }}\n                >\n                  ⚠️ Error loading data: {error}\n                </div>\n              </div>\n            ) : (\n              <TreeMapWrapper $dynamicHeight={dynamicHeight}>\n                <TreemapComponent\n                  users={topUsers}\n                  totalVolume={totalVolume}\n                  width={containerDimensions.width - 48} // Sottraiamo il padding del container\n                  height={dynamicHeight - 48} // Usa l'altezza dinamica meno il padding\n                  connection={connection}\n                />\n              </TreeMapWrapper>\n            )}\n          </TreeMapContainer>\n        </MainContent>\n      </Container>\n    </PageWrapper>\n  );\n}\n"],"names":["SUBGRAPH_URL","TOP_USERS_QUERY","USER_DETAILS_QUERY","USER_HISTORICAL_DATA_QUERY","useUserHistoricalData","userId","days","arguments","length","undefined","data","setData","useState","loading","setLoading","error","setError","useEffect","async","historicalData","first","orderDirection","_data$data4","response","fetch","method","headers","body","JSON","stringify","query","variables","toLowerCase","ok","Error","status","json","errors","userDayDatas","console","fetchUserHistoricalData","err","message","loadData","useLeaderboard","pageSize","users","setUsers","hasMore","setHasMore","page","setPage","loadMore","skip","newUsers","_data$data","map","user","index","rank","fetchLeaderboard","prev","refresh","useUserProfile","userAddress","account","useWeb3React","setUser","targetAddress","userDetails","_data$data2","_rankData$data","_rankData$data$users","rankResponse","score","fetchUserDetails","loadUser","isOwnProfile","fadeIn","keyframes","PageWrapper","styled","SwapPageWrapper","_ref","theme","background","Container","div","Sidebar","_ref2","surface1","SidebarContent","SectionHeader","SectionTitle","ThemedText","SubHeader","_ref3","neutral1","UserList","UserItem","Link","_ref4","surface2","_ref5","surface3","_ref6","RankPosition","_ref7","$rank","accent1","_ref8","accent2","_ref9","_ref10","toString","UserMainInfo","PerformanceStats","SidebarVolumeAmount","BodySmall","_ref11","PerformanceChange","_ref12","$positive","success","critical","_ref13","WalletIcon","_ref14","_ref15","UserDetails","WalletAddress","_ref16","VolumeText","LabelMicro","_ref17","neutral2","MainContent","Header","HeaderLeft","ContestTitle","HeadlineMedium","_ref18","ContestDescription","BodyPrimary","_ref19","HeaderContent","TreeMapContainer","_ref20","TreeMapWrapper","_ref21","$dynamicHeight","_ref22","_ref23","_ref24","Math","min","calculateTreemapHeight","walletCount","calculatedHeight","log","max","TreemapNode","_ref25","$x","_ref26","$y","_ref27","$width","_ref28","$height","_ref29","_ref30","_ref31","_ref32","_ref33","_ref34","NodeHeader","WalletInfo","WalletAvatar","_ref35","_ref36","_ref37","_ref38","WalletDetails","WalletAddressStyled","_ref39","RankBadge","_ref40","_ref41","_ref42","VolumeDisplay","VolumeAmount","_ref43","MiniChart","_ref44","$visible","TreemapComponent","_ref45","totalVolume","width","height","connection","useTheme","treemapData","useMemo","volume","parseFloat","totalVolumeUSD","id","originalValue","percentage","toFixed","values","d","filter","v","normalizedData","normalizedValue","value","root","d3","children","sum","sort","a","b","size","padding","paddingInner","paddingOuter","round","treemap","leaves","x","x0","y","y0","x1","y1","_jsx","style","position","node","_jsxs","$volume","as","to","StatusIcon","showMiniIcons","address","slice","UserChart","color","_ref46","chartData","now","Date","last7Days","i","date","setDate","getDate","setUTCHours","push","floor","getTime","timestamp","dataMap","Map","forEach","dayTimestamp","set","dailyVolumeUSD","cumulativeVolume","last7DaysData","dailyVolume","get","maxCumulativeVolume","day","normalizedY","hexColor","colorString","startsWith","match","parseInt","padStart","getHexColor","ResponsiveContainer","LineChart","margin","top","right","left","bottom","x2","y2","offset","stopColor","stopOpacity","stdDeviation","result","in","Line","type","dataKey","stroke","strokeWidth","dot","activeDot","r","fill","UserPerformanceData","_ref47","currentVolume","_ref48","_sortedData$","_sortedData$2","_sortedData$3","change24h","change7d","sortedDataByDate","sortedData","formattedDate","toISOString","currentTotalVolume","yesterdayTotalVolume","weekAgoTotalVolume","dailyGrowthRate","pow","dataPoints","currentTotal","yesterdayTotal","weekAgoTotal","currentVolumeParam","formatUserAddress","formatVolume","calculatePercentage","userVolume","Leaderboard","connector","selectedCategory","setSelectedCategory","containerRef","useRef","containerDimensions","setContainerDimensions","getConnection","allTimeUsers","allTimeLoading","allTimeError","updateDimensions","current","clientWidth","clientHeight","handleResize","window","addEventListener","removeEventListener","currentUsers","isLoading","topUsers","reduce","sidebarUsers","rawVolume","dynamicHeight","BarChart","MouseoverTooltip","text","placement","Info","cursor","trader","performanceData","TrendingUp","ref","display","alignItems","justifyContent","fontSize","fontWeight","gap","borderRadius","backdropFilter","border","borderTop","animation"],"sourceRoot":""}